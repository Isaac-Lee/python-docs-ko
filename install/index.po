# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-15 20:23+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:7
msgid "Installing Python Modules (Legacy version)"
msgstr "파이썬 모듈 설치 (레거시 버전)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst
msgid "Author"
msgstr "저자"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:9
msgid "Greg Ward"
msgstr "Greg Ward"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:16
msgid ":ref:`installing-index`"
msgstr ":ref:`installing-index`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:16
msgid ""
"The up to date module installation documentation. For regular Python "
"usage, you almost certainly want that document rather than this one."
msgstr "최신 모듈 설치 설명서. 일반적인 파이썬 사용이라면, 거의 확실하게 이 설명서를 원할 것입니다."

#: distutils/_setuptools_disclaimer.rst:3
msgid ""
"This document is being retained solely until the ``setuptools`` "
"documentation at "
"https://setuptools.readthedocs.io/en/latest/setuptools.html independently"
" covers all of the relevant information currently included here."
msgstr ""
"이 문서는 https://setuptools.readthedocs.io/en/latest/setuptools.html 의 "
"``setuptools`` 설명서가 현재 여기에 포함된 모든 관련 정보를 독립적으로 다루기 전까지만 보존됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:23
msgid ""
"This guide only covers the basic tools for building and distributing "
"extensions that are provided as part of this version of Python. Third "
"party tools offer easier to use and more secure alternatives. Refer to "
"the `quick recommendations section <https://packaging.python.org/guides"
"/tool-recommendations/>`__ in the Python Packaging User Guide for more "
"information."
msgstr ""
"이 지침서에서는 이 파이썬 버전의 일부로 제공되는 확장을 빌드하고 배포하기 위한 기본 도구만 다룹니다. 제삼자 도구는 사용하기 쉽고"
" 더 안전한 대안을 제공합니다. 자세한 정보는 파이썬 패키징 사용자 지침서의 `quick recommendations section"
" <https://packaging.python.org/guides/tool-recommendations/>`__\\을 "
"참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:34
msgid "Introduction"
msgstr "소개"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:36
msgid ""
"In Python 2.0, the ``distutils`` API was first added to the standard "
"library. This provided Linux distro maintainers with a standard way of "
"converting Python projects into Linux distro packages, and system "
"administrators with a standard way of installing them directly onto "
"target systems."
msgstr ""
"파이썬 2.0에서, ``distutils`` API가 처음으로 표준 라이브러리에 추가되었습니다. 이는 리눅스 배포 관리자에게 파이썬"
" 프로젝트를 리눅스 배포 패키지로 변환하는 표준 방법을 제공하고, 시스템 관리자에게는 대상 시스템에 직접 설치하는 표준 방법을 "
"제공했습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:41
msgid ""
"In the many years since Python 2.0 was released, tightly coupling the "
"build system and package installer to the language runtime release cycle "
"has turned out to be problematic, and it is now recommended that projects"
" use the ``pip`` package installer and the ``setuptools`` build system, "
"rather than using ``distutils`` directly."
msgstr ""
"파이썬 2.0이 출시된 이후 수년 동안, 빌드 시스템과 패키지 설치 프로그램을 언어 런타임 배포 주기에 밀접하게 연결하는 것은 "
"문제가 되는 것으로 밝혀졌으며, 이제 프로젝트는 ``distutils``\\를 직접 사용하기보다, ``pip`` 패키지 설치 "
"프로그램과 ``setuptools`` 빌드 시스템을 사용하도록 권장합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:47
msgid ""
"See :ref:`installing-index` and :ref:`distributing-index` for more "
"details."
msgstr "자세한 내용은 :ref:`installing-index`\\와 :ref:`distributing-index`\\를 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:49
msgid ""
"This legacy documentation is being retained only until we're confident "
"that the ``setuptools`` documentation covers everything needed."
msgstr "이 레거시 설명서는 ``setuptools`` 설명서가 필요한 모든 것을 다루고 있다고 확신할 때까지만 유지됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:55
msgid "Distutils based source distributions"
msgstr "Distutils 기반 소스 배포"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:57
msgid ""
"If you download a module source distribution, you can tell pretty quickly"
" if it was packaged and distributed in the standard way, i.e. using the "
"Distutils. First, the distribution's name and version number will be "
"featured prominently in the name of the downloaded archive, e.g. "
":file:`foo-1.0.tar.gz` or :file:`widget-0.9.7.zip`.  Next, the archive "
"will unpack into a similarly-named directory: :file:`foo-1.0` or "
":file:`widget-0.9.7`.  Additionally, the distribution will contain a "
"setup script :file:`setup.py`, and a file named :file:`README.txt` or "
"possibly just :file:`README`, which should explain that building and "
"installing the module distribution is a simple matter of running one "
"command from a terminal::"
msgstr ""
"모듈 소스 배포판을 다운로드하면, 표준 방식으로, 즉 Distutils를 사용하여 패키징되고 배포되었는지 매우 빠르게 알 수 "
"있습니다. 첫째, 배포판의 이름과 버전 번호는 다운로드 한 아카이브의 이름(예를 들어 :file:`foo-1.0.tar.gz`\\나"
" :file:`widget-0.9.7.zip`)에 눈에 띄게 표시됩니다. 다음으로, 아카이브는 비슷한 이름의 디렉터리에 압축 "
"해제됩니다: :file:`foo-1.0`\\이나 :file:`widget-0.9.7`. 또한, 배포판에는 설정 스크립트 "
":file:`setup.py`\\와 :file:`README.txt` 또는 어쩌면 단순히 :file:`README` 라는 파일이 "
"포함됩니다. 이 파일은 모듈 배포판을 빌드하고 설치하는 것이 터미널에서 하나의 명령을 실행하는 간단한 문제임을 설명해야 합니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:70
msgid ""
"For Windows, this command should be run from a command prompt window "
"(:menuselection:`Start --> Accessories`)::"
msgstr ""
"윈도우의 경우, 이 명령은 명령 프롬프트 창(:menuselection:`Start --> Accessories`)에서 실행해야 "
"합니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:75
msgid ""
"If all these things are true, then you already know how to build and "
"install the modules you've just downloaded:  Run the command above. "
"Unless you need to install things in a non-standard way or customize the "
"build process, you don't really need this manual.  Or rather, the above "
"command is everything you need to get out of this manual."
msgstr ""
"이 모든 것이 참이면, 방금 다운로드 한 모듈을 빌드하고 설치하는 방법을 이미 알고 있는 것입니다: 위의 명령을 실행하십시오. "
"비표준 방식으로 설치하거나 빌드 프로세스를 사용자 정의해야 하는 경우가 아니라면, 이 설명서가 실제로 필요하지는 않습니다. 또는, "
"위의 명령은 이 설명서에서 벗어나는 데 필요한 모든 것입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:85
msgid "Standard Build and Install"
msgstr "표준 빌드와 설치"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:87
msgid ""
"As described in section :ref:`inst-new-standard`, building and installing"
" a module distribution using the Distutils is usually one simple command "
"to run from a terminal::"
msgstr ""
"섹션 :ref:`inst-new-standard`\\에 설명된 대로, Distutils를 사용하여 모듈 배포를 빌드하고 설치하는 "
"것은 일반적으로 터미널에서 실행하는 하나의 간단한 명령입니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:97
msgid "Platform variations"
msgstr "플랫폼 변형"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:99
msgid ""
"You should always run the setup command from the distribution root "
"directory, i.e. the top-level subdirectory that the module source "
"distribution unpacks into.  For example, if you've just downloaded a "
"module source distribution :file:`foo-1.0.tar.gz` onto a Unix system, the"
" normal thing to do is::"
msgstr ""
"항상 배포 루트 디렉터리, 즉 모듈 소스 배포가 압축 해제된 최상위 서브 디렉터리에서 setup 명령을 실행해야 합니다. 예를 "
"들어, 모듈 소스 배포 :file:`foo-1.0.tar.gz`\\를 유닉스 시스템에 방금 다운로드했다면, 일반적인 작업은 다음과 "
"같습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:108
msgid ""
"On Windows, you'd probably download :file:`foo-1.0.zip`.  If you "
"downloaded the archive file to :file:`C:\\\\Temp`, then it would unpack "
"into :file:`C:\\\\Temp\\\\foo-1.0`; you can use either an archive "
"manipulator with a graphical user interface (such as WinZip) or a "
"command-line tool (such as :program:`unzip` or :program:`pkunzip`) to "
"unpack the archive.  Then, open a command prompt window and run::"
msgstr ""
"윈도우에서는, 아마도 :file:`foo-1.0.zip`\\을 다운로드할 것입니다. 아카이브 파일을 "
":file:`C:\\\\Temp`\\로 다운로드했으면, :file:`C:\\\\Temp\\\\foo-1.0`\\으로 압축이 "
"풀립니다; 그래픽 사용자 인터페이스가 있는 아카이브 조작기(가령 WinZip)나 명령 줄 도구(가령 "
":program:`unzip`\\이나 :program:`pkunzip`)를 사용하여 아카이브의 압축을 풀 수 있습니다. 그런 다음 "
"명령 프롬프트 창을 열고 다음을 실행하십시오::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:122
msgid "Splitting the job up"
msgstr "작업 분할하기"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:124
msgid ""
"Running ``setup.py install`` builds and installs all modules in one run."
"  If you prefer to work incrementally---especially useful if you want to "
"customize the build process, or if things are going wrong---you can use "
"the setup script to do one thing at a time.  This is particularly helpful"
" when the build and install will be done by different users---for "
"example, you might want to build a module distribution and hand it off to"
" a system administrator for installation (or do it yourself, with super-"
"user privileges)."
msgstr ""
"``setup.py install``\\을 실행하면 한 번의 실행으로 모든 모듈을 빌드하고 설치합니다. 점진적으로 작업하는 것을 "
"선호하면---특히 빌드 프로세스를 사용자 정의하거나, 문제가 발생하면 특히 유용합니다---설정 스크립트를 사용하여 한 번에 한 가지"
" 작업을 수행할 수 있습니다. 이는 빌드와 설치를 다른 사용자가 수행할 때 특히 유용합니다---예를 들어, 모듈 배포를 빌드하고 "
"설치를 위해 시스템 관리자에게 넘겨주고 싶을 수 있습니다 (또는 슈퍼 유저 권한으로, 직접 수행합니다)."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:132
msgid ""
"For example, you can build everything in one step, and then install "
"everything in a second step, by invoking the setup script twice::"
msgstr "예를 들어, 설정 스크립트를 두 번 호출하여 한 단계에서 모든 것을 빌드한 다음, 두 번째 단계에서 모든 것을 설치할 수 있습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:138
msgid ""
"If you do this, you will notice that running the :command:`install` "
"command first runs the :command:`build` command, which---in this case---"
"quickly notices that it has nothing to do, since everything in the "
":file:`build` directory is up-to-date."
msgstr ""
"이렇게 하면, :command:`install` 명령을 실행하면 먼저 :command:`build` 명령이 실행된다는 것을 알 수 "
"있습니다. 이 경우 :file:`build` 디렉터리의 모든 내용이 최신 상태이므로 수행할 작업이 없음을 빠르게 알 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:143
msgid ""
"You may not need this ability to break things down often if all you do is"
" install modules downloaded off the 'net, but it's very handy for more "
"advanced tasks.  If you get into distributing your own Python modules and"
" extensions, you'll run lots of individual Distutils commands on their "
"own."
msgstr ""
"'여러분이 하는 일이 넷에서 다운로드 한 모듈을 설치하는 것뿐이라면, 작업을 분할하는 이 기능이 자주 필요하지 않을 수 있지만, "
"고급 작업에는 매우 편리합니다. 여러분 자신의 파이썬 모듈과 확장을 배포한다면, 많은 개별 Distutils 명령을 실행하게 "
"됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:152
msgid "How building works"
msgstr "빌드 작동 원리"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:154
msgid ""
"As implied above, the :command:`build` command is responsible for putting"
" the files to install into a *build directory*.  By default, this is "
":file:`build` under the distribution root; if you're excessively "
"concerned with speed, or want to keep the source tree pristine, you can "
"change the build directory with the :option:`!--build-base` option. For "
"example::"
msgstr ""
"위에서 암시했듯이, :command:`build` 명령은 설치할 파일을 *빌드 디렉터리*\\에 넣는 역할을 합니다. 기본적으로, "
"이것은 배포 루트 아래의 :file:`build`\\입니다; 속도에 지나치게 신경을 쓰거나 소스 트리를 원래 상태로 유지하려면, "
":option:`!--build-base` 옵션을 사용하여 빌드 디렉터리를 변경할 수 있습니다. 예를 들면::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:162
msgid ""
"(Or you could do this permanently with a directive in your system or "
"personal Distutils configuration file; see section :ref:`inst-config-"
"files`.)  Normally, this isn't necessary."
msgstr ""
"(또는 시스템이나 개인 Distutils 구성 파일의 지시문을 사용하여 영구적으로 이렇게 만들 수 있습니다; 섹션 :ref"
":`inst-config-files`\\을 참조하십시오.) 일반적으로, 이 작업은 필요하지 않습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:166
msgid "The default layout for the build tree is as follows::"
msgstr "빌드 트리의 기본 레이아웃은 다음과 같습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:173
msgid ""
"where ``<plat>`` expands to a brief description of the current "
"OS/hardware platform and Python version.  The first form, with just a "
":file:`lib` directory, is used for \"pure module distributions\"---that "
"is, module distributions that include only pure Python modules.  If a "
"module distribution contains any extensions (modules written in C/C++), "
"then the second form, with two ``<plat>`` directories, is used.  In that "
"case, the :file:`temp.{plat}` directory holds temporary files generated "
"by the compile/link process that don't actually get installed.  In either"
" case, the :file:`lib` (or :file:`lib.{plat}`) directory contains all "
"Python modules (pure Python and extensions) that will be installed."
msgstr ""
"여기서 ``<plat>``\\은 현재 OS/하드웨어 플랫폼과 파이썬 버전에 대한 간략한 설명으로 확장됩니다. :file:`lib` "
"디렉터리 만 있는 첫 번째 형식은 \"순수 모듈 배포\"(즉 순수한 파이썬 모듈만 포함하는 모듈 배포)에 사용됩니다. 모듈 배포가 "
"확장(C/C++로 작성된 모듈)을 포함하면, 두 개의 ``<plat>`` 디렉터리가 있는 두 번째 형식이 사용됩니다. 이 경우, "
":file:`temp.{plat}` 디렉터리는 실제로 설치되지 않는 컴파일/링크 프로세스에 의해 생성된 임시 파일을 보유합니다. 두"
" 경우 모두, :file:`lib` (또는 :file:`lib.{plat}`) 디렉터리에는 설치될 모든 파이썬 모듈(순수 파이썬과 "
"확장)이 포함됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:183
msgid ""
"In the future, more directories will be added to handle Python scripts, "
"documentation, binary executables, and whatever else is needed to handle "
"the job of installing Python modules and applications."
msgstr ""
"향후에는, 파이썬 스크립트, 설명서, 바이너리 실행 파일 및 파이썬 모듈과 응용 프로그램 설치 작업을 처리하는 데 필요한 모든 것을"
" 처리하기 위해 더 많은 디렉터리가 추가될 것입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:191
msgid "How installation works"
msgstr "설치 작동 원리"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:193
msgid ""
"After the :command:`build` command runs (whether you run it explicitly, "
"or the :command:`install` command does it for you), the work of the "
":command:`install` command is relatively simple: all it has to do is copy"
" everything under :file:`build/lib` (or :file:`build/lib.{plat}`) to your"
" chosen installation directory."
msgstr ""
":command:`build` 명령이 실행된 후 (명시적으로 실행하든, :command:`install` 명령이 자동으로 "
"수행하든), :command:`install` 명령의 작업은 비교적 간단합니다; :file:`build/lib` (또는 "
":file:`build/lib.{plat}`) 아래의 모든 것을 선택한 설치 디렉터리에 복사하기만 하면 됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:199
msgid ""
"If you don't choose an installation directory---i.e., if you just run "
"``setup.py install``\\ ---then the :command:`install` command installs to"
" the standard location for third-party Python modules.  This location "
"varies by platform and by how you built/installed Python itself.  On Unix"
" (and Mac OS X, which is also Unix-based), it also depends on whether the"
" module distribution being installed is pure Python or contains "
"extensions (\"non-pure\"):"
msgstr ""
"설치 디렉터리를 선택하지 않으면---즉, ``setup.py install``\\만 실행하면---:command:`install` "
"명령이 제삼자 파이썬 모듈의 표준 위치에 설치됩니다. 이 위치는 플랫폼과 파이썬 자체를 빌드/설치한 방법에 따라 다릅니다. "
"유닉스(그리고 Mac OS X, 이 역시 유닉스 기반입니다)에서는, 설치되는 모듈 배포판이 순수 파이썬인지 또는 "
"확장(\"비순수\")을 포함하는지에 따라 다릅니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:209
msgid "Platform"
msgstr "플랫폼"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:209
msgid "Standard installation location"
msgstr "표준 설치 위치"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:209
msgid "Default value"
msgstr "기본값"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:209
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:735
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:747
msgid "Notes"
msgstr "노트"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:211
msgid "Unix (pure)"
msgstr "유닉스 (순수)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:211
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:424
msgid ":file:`{prefix}/lib/python{X.Y}/site-packages`"
msgstr ":file:`{prefix}/lib/python{X.Y}/site-packages`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:211
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:213
msgid ":file:`/usr/local/lib/python{X.Y}/site-packages`"
msgstr ":file:`/usr/local/lib/python{X.Y}/site-packages`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:211
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:213
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:737
msgid "\\(1)"
msgstr "\\(1)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:213
msgid "Unix (non-pure)"
msgstr "유닉스 (비순수)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:213
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:425
msgid ":file:`{exec-prefix}/lib/python{X.Y}/site-packages`"
msgstr ":file:`{exec-prefix}/lib/python{X.Y}/site-packages`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:215
msgid "Windows"
msgstr "윈도우"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:215
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:476
msgid ":file:`{prefix}\\\\Lib\\\\site-packages`"
msgstr ":file:`{prefix}\\\\Lib\\\\site-packages`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:215
msgid ":file:`C:\\\\Python{XY}\\\\Lib\\\\site-packages`"
msgstr ":file:`C:\\\\Python{XY}\\\\Lib\\\\site-packages`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:215
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:739
msgid "\\(2)"
msgstr "\\(2)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:218
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:759
msgid "Notes:"
msgstr "노트:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:221
msgid ""
"Most Linux distributions include Python as a standard part of the system,"
" so :file:`{prefix}` and :file:`{exec-prefix}` are usually both "
":file:`/usr` on Linux.  If you build Python yourself on Linux (or any "
"Unix-like system), the default :file:`{prefix}` and :file:`{exec-prefix}`"
" are :file:`/usr/local`."
msgstr ""
"대부분의 리눅스 배포에는 파이썬이 시스템의 표준 부분으로 포함되어 있어서, :file:`{prefix}`\\와 :file"
":`{exec-prefix}`\\는 일반적으로 리눅스에서 모두 :file:`/usr`\\입니다. 리눅스(또는 모든 유닉스 계열 "
"시스템)에서 파이썬을 직접 빌드하면, 기본 :file:`{prefix}`\\와 :file:`{exec-prefix}`\\는 "
":file:`/usr/local`\\입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:227
msgid ""
"The default installation directory on Windows was :file:`C:\\\\Program "
"Files\\\\Python` under Python 1.6a1, 1.5.2, and earlier."
msgstr ""
"윈도우의 기본 설치 디렉터리는 파이썬 1.6a1, 1.5.2 및 이전 버전에서 :file:`C:\\\\Program "
"Files\\\\Python`\\이었습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:230
msgid ""
":file:`{prefix}` and :file:`{exec-prefix}` stand for the directories that"
" Python is installed to, and where it finds its libraries at run-time.  "
"They are always the same under Windows, and very often the same under "
"Unix and Mac OS X.  You can find out what your Python installation uses "
"for :file:`{prefix}` and :file:`{exec-prefix}` by running Python in "
"interactive mode and typing a few simple commands. Under Unix, just type "
"``python`` at the shell prompt.  Under Windows, choose "
":menuselection:`Start --> Programs --> Python X.Y --> Python (command "
"line)`.   Once the interpreter is started, you type Python code at the "
"prompt.  For example, on my Linux system, I type the three Python "
"statements shown below, and get the output as shown, to find out my "
":file:`{prefix}` and :file:`{exec-prefix}`:"
msgstr ""
":file:`{prefix}`\\와 :file:`{exec-prefix}`\\는 파이썬이 설치된 디렉터리와 실행 시간에 라이브러리를"
" 찾는 위치를 나타냅니다. 윈도우에서는 항상 같으며, 유닉스와 Mac OS X에서도 아주 자주 같습니다. 대화 형 모드에서 파이썬을"
" 실행하고 몇 가지 간단한 명령을 입력하여 파이썬 설치가 사용한 :file:`{prefix}`\\와 :file:`{exec-"
"prefix}`\\를 확인할 수 있습니다. 유닉스에서는, 셸 프롬프트에서 ``python``\\을 입력하기만 하면 됩니다. "
"윈도우에서는, :menuselection:`Start --> Programs --> Python X.Y --> Python "
"(command line)`\\을 선택합니다. 일단 인터프리터가 시작되면, 프롬프트에 파이썬 코드를 입력합니다. 예를 들어, 제 "
"리눅스 시스템에서, 저는 아래 표시된 세 개의 파이썬 문을 입력하고, 표시된 출력을 얻어서, 제 :file:`{prefix}`\\와"
" :file:`{exec-prefix}`\\를 찾습니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:252
msgid ""
"A few other placeholders are used in this document: :file:`{X.Y}` stands "
"for the version of Python, for example ``3.2``; :file:`{abiflags}` will "
"be replaced by the value of :data:`sys.abiflags` or the empty string for "
"platforms which don't define ABI flags; :file:`{distname}` will be "
"replaced by the name of the module distribution being installed.  Dots "
"and capitalization are important in the paths; for example, a value that "
"uses ``python3.2`` on UNIX will typically use ``Python32`` on Windows."
msgstr ""
"이 설명서에는 몇 가지 다른 자리 표시자가 사용됩니다: :file:`{X.Y}`\\는 파이썬 버전을 나타냅니다, 예를 들어 "
"``3.2``; :file:`{abiflags}`\\는 :data:`sys.abiflags` 값이나 ABI 플래그를 정의하지 않는 "
"플랫폼에서는 빈 문자열로 대체됩니다; :file:`{distname}`\\은 설치 중인 모듈 배포의 이름으로 대체됩니다. 경로에서 "
"점과 대문자는 중요합니다; 예를 들어, 유닉스에서 ``python3.2``\\를 사용하는 값은 일반적으로 윈도우에서 "
"``Python32``\\를 사용합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:260
msgid ""
"If you don't want to install modules to the standard location, or if you "
"don't have permission to write there, then you need to read about "
"alternate installations in section :ref:`inst-alt-install`.  If you want "
"to customize your installation directories more heavily, see section :ref"
":`inst-custom-install` on custom installations."
msgstr ""
"표준 위치에 모듈을 설치하고 싶지 않거나, 거기에 쓸 권한이 없다면, :ref:`inst-alt-install` 섹션에서 대안 "
"설치에 대해 읽어야 합니다. 설치 디렉터리를 더 많이 사용자 정의하려면, 사용자 정의 설치에 대한 섹션 :ref:`inst-"
"custom-install`\\를 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:270
msgid "Alternate Installation"
msgstr "대안 설치"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:272
msgid ""
"Often, it is necessary or desirable to install modules to a location "
"other than the standard location for third-party Python modules.  For "
"example, on a Unix system you might not have permission to write to the "
"standard third-party module directory.  Or you might wish to try out a "
"module before making it a standard part of your local Python "
"installation.  This is especially true when upgrading a distribution "
"already present: you want to make sure your existing base of scripts "
"still works with the new version before actually upgrading."
msgstr ""
"종종, 제삼자 파이썬 모듈의 표준 위치가 아닌 다른 위치에 모듈을 설치하는 것이 필요하거나 바람직합니다. 예를 들어, 유닉스 "
"시스템에서 표준 제삼자 모듈 디렉터리에 대해 쓰기 권한이 없을 수 있습니다. 또는 로컬 파이썬 설치의 표준 부분으로 만들기 전에 "
"모듈을 시험해 보고 싶을 수도 있습니다. 이미 존재하는 배포판을 업그레이드할 때 특히 그렇습니다; 실제로 업그레이드하기 전에 기존 "
"스크립트 기반이 새 버전에서 계속 작동하는지 확인하려고 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:280
msgid ""
"The Distutils :command:`install` command is designed to make installing "
"module distributions to an alternate location simple and painless.  The "
"basic idea is that you supply a base directory for the installation, and "
"the :command:`install` command picks a set of directories (called an "
"*installation scheme*) under this base directory in which to install "
"files.  The details differ across platforms, so read whichever of the "
"following sections applies to you."
msgstr ""
"Distutils :command:`install` 명령은 모듈 배포를 대안 위치에 간단하고 쉽게 설치할 수 있도록 설계되었습니다."
" 기본 아이디어는 여러분이 설치를 위한 기본 디렉터리를 제공하고, :command:`install` 명령은 이 기본 디렉터리 "
"아래에서 파일을 설치할 디렉터리 집합(*설치 체계(installation scheme)*\\라고 합니다)을 선택하는 것입니다. 세부"
" 정보는 플랫폼에 따라 다르므로, 다음 섹션 중 자신에게 해당하는 항목을 읽으십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:288
msgid ""
"Note that the various alternate installation schemes are mutually "
"exclusive: you can pass ``--user``, or ``--home``, or ``--prefix`` and "
"``--exec-prefix``, or ``--install-base`` and ``--install-platbase``, but "
"you can't mix from these groups."
msgstr ""
"다양한 대안 설치 체계는 상호 배타적입니다: ``--user``, ``--home``, ``--prefix``\\와 "
"``--exec-prefix``, ``--install-base`` 및 ``--install-platbase``\\를 전달할 수 "
"있지만, 이러한 그룹에서 혼합할 수는 없습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:297
msgid "Alternate installation: the user scheme"
msgstr "대안 설치: 사용자 체계"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:299
msgid ""
"This scheme is designed to be the most convenient solution for users that"
" don't have write permission to the global site-packages directory or "
"don't want to install into it.  It is enabled with a simple option::"
msgstr ""
"이 체계는 전역 site-packages 디렉터리에 대해 쓰기 권한이 없거나, 그곳에 설치를 원하지 않는 사용자에게 가장 편리한 "
"솔루션이 되도록 설계되었습니다. 다음과 같은 간단한 옵션으로 활성화됩니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:305
msgid ""
"Files will be installed into subdirectories of :data:`site.USER_BASE` "
"(written as :file:`{userbase}` hereafter).  This scheme installs pure "
"Python modules and extension modules in the same location (also known as "
":data:`site.USER_SITE`). Here are the values for UNIX, including Mac OS "
"X:"
msgstr ""
"파일은 :data:`site.USER_BASE`\\(이하 :file:`{userbase}`\\로 씁니다)의 서브 디렉터리에 "
"설치됩니다. 이 체계는 같은 위치(:data:`site.USER_SITE`\\라고도 합니다)에 순수 파이썬 모듈과 확장 모듈을 "
"설치합니다. 다음은 Mac OS X를 포함하는 유닉스의 값입니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:311
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:322
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:373
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:422
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:474
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:499
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:735
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:747
msgid "Type of file"
msgstr "파일 유형"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:311
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:322
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:373
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:422
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:474
msgid "Installation directory"
msgstr "설치 디렉터리"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:313
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:324
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:375
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:476
msgid "modules"
msgstr "모듈"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:313
msgid ":file:`{userbase}/lib/python{X.Y}/site-packages`"
msgstr ":file:`{userbase}/lib/python{X.Y}/site-packages`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:314
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:325
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:376
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:426
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:477
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:504
msgid "scripts"
msgstr "스크립트"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:314
msgid ":file:`{userbase}/bin`"
msgstr ":file:`{userbase}/bin`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:315
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:326
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:377
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:427
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:478
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:505
msgid "data"
msgstr "데이터"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:315
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:326
msgid ":file:`{userbase}`"
msgstr ":file:`{userbase}`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:316
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:327
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:378
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:428
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:479
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:506
msgid "C headers"
msgstr "C 헤더"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:316
msgid ":file:`{userbase}/include/python{X.Y}{abiflags}/{distname}`"
msgstr ":file:`{userbase}/include/python{X.Y}{abiflags}/{distname}`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:319
msgid "And here are the values used on Windows:"
msgstr "그리고 다음은 윈도우에서 사용되는 값입니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:324
msgid ":file:`{userbase}\\\\Python{XY}\\\\site-packages`"
msgstr ":file:`{userbase}\\\\Python{XY}\\\\site-packages`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:325
msgid ":file:`{userbase}\\\\Python{XY}\\\\Scripts`"
msgstr ":file:`{userbase}\\\\Python{XY}\\\\Scripts`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:327
msgid ":file:`{userbase}\\\\Python{XY}\\\\Include\\\\{distname}`"
msgstr ":file:`{userbase}\\\\Python{XY}\\\\Include\\\\{distname}`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:330
msgid ""
"The advantage of using this scheme compared to the other ones described "
"below is that the user site-packages directory is under normal conditions"
" always included in :data:`sys.path` (see :mod:`site` for more "
"information), which means that there is no additional step to perform "
"after running the :file:`setup.py` script to finalize the installation."
msgstr ""
"아래에 설명된 다른 체계에 비해 이 체계를 사용하는 이점은 사용자 site-packages 디렉터리가 항상 "
":data:`sys.path`\\에 포함되어있는 정상적인 조건에 있다는 것입니다 (자세한 내용은 :mod:`site`\\를 "
"참조하십시오), 이는 :file:`setup.py` 스크립트를 실행한 후에 설치를 완료하기 위해 수행할 추가 단계가 없다는 "
"뜻입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:336
msgid ""
"The :command:`build_ext` command also has a ``--user`` option to add "
":file:`{userbase}/include` to the compiler search path for header files "
"and :file:`{userbase}/lib` to the compiler search path for libraries as "
"well as to the runtime search path for shared C libraries (rpath)."
msgstr ""
":command:`build_ext` 명령에도 :file:`{userbase}/include`\\를 헤더 파일의 컴파일러 검색 "
"경로에 추가하고 :file:`{userbase}/lib`\\를 라이브러리의 컴파일러 검색 경로뿐만 아니라 공유 C 라이브러리의 실행"
" 시간 검색 경로(rpath)에 추가하는 ``--user`` 옵션이 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:345
msgid "Alternate installation: the home scheme"
msgstr "대안 설치: 홈 체계"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:347
msgid ""
"The idea behind the \"home scheme\" is that you build and maintain a "
"personal stash of Python modules.  This scheme's name is derived from the"
" idea of a \"home\" directory on Unix, since it's not unusual for a Unix "
"user to make their home directory have a layout similar to :file:`/usr/` "
"or :file:`/usr/local/`. This scheme can be used by anyone, regardless of "
"the operating system they are installing for."
msgstr ""
"\"홈 체계\"의 배후에 있는 아이디어는 파이썬 모듈의 개인 보관함을 구축하고 유지하는 것입니다. 이 체계의 이름은 유닉스의 "
"\"홈(home)\" 디렉터리의 아이디어에서 파생되었는데, 유닉스 사용자가 홈 디렉터리를 :file:`/usr/`\\이나 "
":file:`/usr/local/`\\과 유사한 배치로 만드는 것이 드문 일이 아니기 때문입니다. 이 체계는 설치하는 운영 체제와 "
"관계없이 누구나 사용할 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:354
msgid "Installing a new module distribution is as simple as ::"
msgstr "새 모듈 배포판을 설치하는 것은 다음과 같이 간단합니다 ::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:358
msgid ""
"where you can supply any directory you like for the :option:`!--home` "
"option.  On Unix, lazy typists can just type a tilde (``~``); the "
":command:`install` command will expand this to your home directory::"
msgstr ""
"여기서 :option:`!--home` 옵션에 원하는 디렉터리를 제공할 수 있습니다. 유닉스에서, 게으른 타이피스트는 "
"물결표(``~``)만 입력할 수 있습니다; :command:`install` 명령은 이를 여러분의 홈 디렉터리로 확장합니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:364
msgid ""
"To make Python find the distributions installed with this scheme, you may"
" have to :ref:`modify Python's search path <inst-search-path>` or edit "
":mod:`sitecustomize` (see :mod:`site`) to call :func:`site.addsitedir` or"
" edit :data:`sys.path`."
msgstr ""
"파이썬이 이 체계로 설치된 배포판을 찾도록 하려면, :ref:`파이썬의 검색 경로를 수정 <inst-search-"
"path>`\\하거나 :mod:`sitecustomize` (:mod:`site` 참조)를 편집하여 "
":func:`site.addsitedir` 을 호출하거나 :data:`sys.path`\\를 편집해야 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:369
msgid ""
"The :option:`!--home` option defines the installation base directory.  "
"Files are installed to the following directories under the installation "
"base as follows:"
msgstr ""
":option:`!--home` 옵션은 설치 기본 디렉터리를 정의합니다. 파일은 다음과 같이 설치 기본 디렉터리 아래의 다음 "
"디렉터리에 설치됩니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:375
msgid ":file:`{home}/lib/python`"
msgstr ":file:`{home}/lib/python`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:376
msgid ":file:`{home}/bin`"
msgstr ":file:`{home}/bin`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:377
msgid ":file:`{home}`"
msgstr ":file:`{home}`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:378
msgid ":file:`{home}/include/python/{distname}`"
msgstr ":file:`{home}/include/python/{distname}`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:381
msgid "(Mentally replace slashes with backslashes if you're on Windows.)"
msgstr "(윈도우를 사용하면 슬래시를 역 슬래시로 바꾸십시오.)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:387
msgid "Alternate installation: Unix (the prefix scheme)"
msgstr "대안 설치: 유닉스 (접두사 체계)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:389
msgid ""
"The \"prefix scheme\" is useful when you wish to use one Python "
"installation to perform the build/install (i.e., to run the setup "
"script), but install modules into the third-party module directory of a "
"different Python installation (or something that looks like a different "
"Python installation).  If this sounds a trifle unusual, it is---that's "
"why the user and home schemes come before.  However, there are at least "
"two known cases where the prefix scheme will be useful."
msgstr ""
"\"접두사 체계(prefix scheme)\"는 하나의 파이썬 설치를 사용하여 빌드/설치(즉 설정 스크립트 실행)를 수행하지만, "
"다른 파이썬 설치(또는 다른 파이썬 설치처럼 보이는 무엇)의 제삼자 모듈 디렉터리로 모듈을 설치할 때 유용합니다. 이것이 다소 "
"비정상적으로 들린다면, 실제로 그렇습니다--사용자와 홈 체계가 앞에 나온 이유입니다. 그러나, 접두사 체계가 유용하다고 알려진 "
"사례가 적어도 두 개 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:396
msgid ""
"First, consider that many Linux distributions put Python in :file:`/usr`,"
" rather than the more traditional :file:`/usr/local`.  This is entirely "
"appropriate, since in those cases Python is part of \"the system\" rather"
" than a local add-on. However, if you are installing Python modules from "
"source, you probably want them to go in "
":file:`/usr/local/lib/python2.{X}` rather than "
":file:`/usr/lib/python2.{X}`.  This can be done with ::"
msgstr ""
"첫째, 많은 리눅스 배포판에서 파이썬을 더 전통적인 :file:`/usr/local`\\이 아닌 :file:`/usr`\\에 "
"넣는다는 점을 고려하십시오. 이 경우 파이썬은 로컬 애드온이 아닌 \"시스템\"의 일부이기 때문에, 전적으로 적절합니다. 그러나, "
"소스에서 파이썬 모듈을 설치하면, :file:`/usr/lib/python2.{X}` 가 아닌 "
":file:`/usr/local/lib/python2.{X}` 로 보내기를 원할 것입니다. 이것은 다음처럼 할 수 있습니다 ::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:405
msgid ""
"Another possibility is a network filesystem where the name used to write "
"to a remote directory is different from the name used to read it: for "
"example, the Python interpreter accessed as :file:`/usr/local/bin/python`"
" might search for modules in :file:`/usr/local/lib/python2.{X}`, but "
"those modules would have to be installed to, say, "
":file:`/mnt/{@server}/export/lib/python2.{X}`.  This could be done with "
"::"
msgstr ""
"또 다른 가능성은 원격 디렉터리에 쓰는 데 사용되는 이름이 이를 읽는 데 사용되는 이름과 다른 네트워크 파일 시스템입니다: 예를 "
"들어, :file:`/usr/local/bin/python`\\으로 액세스한 파이썬 인터프리터는 "
":file:`/usr/local/lib/python2.{X}` 에서 모듈을 검색하지만, 해당 모듈은 가령 "
":file:`/mnt/{@server}/export/lib/python2.{X}` 에 설치해야 합니다. 이것은 다음처럼 할 수 "
"있습니다 ::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:414
msgid ""
"In either case, the :option:`!--prefix` option defines the installation "
"base, and the :option:`!--exec-prefix` option defines the platform-"
"specific installation base, which is used for platform-specific files.  "
"(Currently, this just means non-pure module distributions, but could be "
"expanded to C libraries, binary executables, etc.)  If :option:`!--exec-"
"prefix` is not supplied, it defaults to :option:`!--prefix`.  Files are "
"installed as follows:"
msgstr ""
"두 경우 모두, :option:`!--prefix` 옵션은 설치 기본 디렉터리를 정의하고, :option:`!--exec-"
"prefix` 옵션은 플랫폼별 파일에 사용되는 플랫폼별 설치 기본 디렉터리를 정의합니다. (현재, 이것은 단지 순수하지 않은 모듈 "
"배포를 뜻하지만, C 라이브러리, 바이너리 실행 파일 등으로 확장 할 수 있습니다.) :option:`!--exec-"
"prefix`\\가 제공되지 않으면, 기본값은 :option:`!--prefix`\\입니다. 파일은 다음과 같이 설치됩니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:424
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:501
msgid "Python modules"
msgstr "파이썬 모듈"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:425
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:502
msgid "extension modules"
msgstr "확장 모듈"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:426
msgid ":file:`{prefix}/bin`"
msgstr ":file:`{prefix}/bin`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:427
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:478
msgid ":file:`{prefix}`"
msgstr ":file:`{prefix}`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:428
msgid ":file:`{prefix}/include/python{X.Y}{abiflags}/{distname}`"
msgstr ":file:`{prefix}/include/python{X.Y}{abiflags}/{distname}`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:431
msgid ""
"There is no requirement that :option:`!--prefix` or :option:`!--exec-"
"prefix` actually point to an alternate Python installation; if the "
"directories listed above do not already exist, they are created at "
"installation time."
msgstr ""
":option:`!--prefix`\\나 :option:`!--exec-prefix`\\가 실제로 대안 파이썬 설치를 가리킬 필요는"
" 없습니다; 위에 나열된 디렉터리가 아직 존재하지 않으면, 설치 시 만들어집니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:435
msgid ""
"Incidentally, the real reason the prefix scheme is important is simply "
"that a standard Unix installation uses the prefix scheme, but with "
":option:`!--prefix` and :option:`!--exec-prefix` supplied by Python "
"itself as ``sys.prefix`` and ``sys.exec_prefix``.  Thus, you might think "
"you'll never use the prefix scheme, but every time you run ``python "
"setup.py install`` without any other options, you're using it."
msgstr ""
"덧붙여서, 접두사 체계가 중요한 진짜 이유는 단순히 표준 유닉스 설치가 파이썬 자체에서 ``sys.prefix``\\와 "
"``sys.exec_prefix``\\로 제공되는 :option:`!--prefix`\\와 :option:`!--exec-"
"prefix`\\를 사용하는 접두사 체계를 사용하는 것입니다. 따라서, 여러분이 접두사 체계를 사용하지 않으리라 생각할 수 있지만,"
" 다른 옵션 없이 ``python setup.py install``\\을 실행할 때마다 이를 사용하고 있는 것입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:442
msgid ""
"Note that installing extensions to an alternate Python installation has "
"no effect on how those extensions are built: in particular, the Python "
"header files (:file:`Python.h` and friends) installed with the Python "
"interpreter used to run the setup script will be used in compiling "
"extensions.  It is your responsibility to ensure that the interpreter "
"used to run extensions installed in this way is compatible with the "
"interpreter used to build them.  The best way to do this is to ensure "
"that the two interpreters are the same version of Python (possibly "
"different builds, or possibly copies of the same build).  (Of course, if "
"your :option:`!--prefix` and :option:`!--exec-prefix` don't even point to"
" an alternate Python installation, this is immaterial.)"
msgstr ""
"대안 파이썬 설치에 확장을 설치하는 것은 해당 확장이 빌드되는 방식에 영향을 미치지 않음에 유의하십시오: 특히, 설치 스크립트를 "
"실행하는 데 사용되는 파이썬 인터프리터와 함께 설치된 파이썬 헤더 파일(:file:`Python.h`\\와 그 동료들)이 확장을 "
"컴파일하는 데 사용됩니다. 이러한 방식으로 설치된 확장 프로그램을 실행하는 데 사용되는 인터프리터가 이를 빌드하는 데 사용된 "
"인터프리터와 호환되는지 확인하는 것은 여러분의 책임입니다. 이를 수행하는 가장 좋은 방법은 두 인터프리터가 같은 파이썬 버전(다른 "
"빌드 또는 같은 빌드의 복사본일 수 있습니다)인지 확인하는 것입니다. (물론, :option:`!--prefix`\\와 "
":option:`!--exec-prefix`\\가 대안 파이썬 설치를 가리키지 않으면, 이는 중요하지 않습니다.)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:457
msgid "Alternate installation: Windows (the prefix scheme)"
msgstr "대안 설치: 윈도우 (접두사 체계)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:459
msgid ""
"Windows has no concept of a user's home directory, and since the standard"
" Python installation under Windows is simpler than under Unix, the "
":option:`!--prefix` option has traditionally been used to install "
"additional packages in separate locations on Windows. ::"
msgstr ""
"윈도우에는 사용자의 홈 디렉터리에 대한 개념이 없으며, 윈도우에서 표준 파이썬 설치가 유닉스보다 간단하기 때문에, 전통적으로 "
":option:`!--prefix` 옵션은 윈도우의 별도 위치에 추가 패키지를 설치하는 데 사용되어 왔습니다. ::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:466
msgid ""
"to install modules to the :file:`\\\\Temp\\\\Python` directory on the "
"current drive."
msgstr "이것은 현재 드라이브의 :file:`\\\\Temp\\\\Python` 디렉터리에 모듈을 설치합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:468
msgid ""
"The installation base is defined by the :option:`!--prefix` option; the "
":option:`!--exec-prefix` option is not supported under Windows, which "
"means that pure Python modules and extension modules are installed into "
"the same location. Files are installed as follows:"
msgstr ""
"설치 기본 디렉터리는 :option:`!--prefix` 옵션으로 정의됩니다; :option:`!--exec-prefix` 옵션은 "
"윈도우에서 지원되지 않습니다. 이는 순수 파이썬 모듈과 확장 모듈이 같은 위치에 설치됨을 뜻합니다. 파일은 다음과 같이 설치됩니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:477
msgid ":file:`{prefix}\\\\Scripts`"
msgstr ":file:`{prefix}\\\\Scripts`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:479
msgid ":file:`{prefix}\\\\Include\\\\{distname}`"
msgstr ":file:`{prefix}\\\\Include\\\\{distname}`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:486
msgid "Custom Installation"
msgstr "사용자 정의 설치"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:488
msgid ""
"Sometimes, the alternate installation schemes described in section :ref"
":`inst-alt-install` just don't do what you want.  You might want to tweak"
" just one or two directories while keeping everything under the same base"
" directory, or you might want to completely redefine the installation "
"scheme.  In either case, you're creating a *custom installation scheme*."
msgstr ""
"때에 따라, 섹션 :ref:`inst-alt-install`\\에 설명된 대안 설치 체계는 여러분이 원하는 것을 수행하지 않습니다."
" 모든 것을 같은 기본 디렉터리 아래에 유지하면서 한두 개의 디렉터리만 조정하거나, 설치 체계를 완전히 재정의하고 싶을 수 "
"있습니다. 두 경우 모두, *사용자 정의 설치 체계(custom installation scheme)*\\를 만들고 있는 것입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:494
msgid ""
"To create a custom installation scheme, you start with one of the "
"alternate schemes and override some of the installation directories used "
"for the various types of files, using these options:"
msgstr ""
"사용자 정의 설치 체계를 만들려면, 대안 체계 중 하나로 시작하고 다음 옵션을 사용하여 다양한 유형의 파일에 사용되는 일부 설치 "
"디렉터리를 재정의합니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:499
msgid "Override option"
msgstr "재정의 옵션"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:501
msgid "``--install-purelib``"
msgstr "``--install-purelib``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:502
msgid "``--install-platlib``"
msgstr "``--install-platlib``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:503
msgid "all modules"
msgstr "모든 모듈"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:503
msgid "``--install-lib``"
msgstr "``--install-lib``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:504
msgid "``--install-scripts``"
msgstr "``--install-scripts``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:505
msgid "``--install-data``"
msgstr "``--install-data``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:506
msgid "``--install-headers``"
msgstr "``--install-headers``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:509
msgid ""
"These override options can be relative, absolute, or explicitly defined "
"in terms of one of the installation base directories. (There are two "
"installation base directories, and they are normally the same---they only"
" differ when you use the Unix \"prefix scheme\" and supply different "
"``--prefix`` and ``--exec-prefix`` options; using ``--install-lib`` will "
"override values computed or given for ``--install-purelib`` and "
"``--install-platlib``, and is recommended for schemes that don't make a "
"difference between Python and extension modules.)"
msgstr ""
"이러한 재정의 옵션은 상대적이거나, 절대적이거나 또는 설치 기본 디렉터리 중 하나로 명시적으로 정의될 수 있습니다. (두 개의 설치"
" 기본 디렉터리가 있으며, 일반적으로 같습니다---유닉스 \"접두사 체계\"를 사용하고 다른 ``--prefix``\\와 "
"``--exec-prefix`` 옵션을 제공할 때만 다릅니다; ``--install-lib``\\를 사용하면 ``--install-"
"purelib``\\와 ``--install-platlib``\\에 대해 계산되거나 제공된 값을 재정의합니다, 그리고 이는 파이썬과"
" 확장 모듈 사이에 차이를 두지 않는 체계에 권장됩니다.)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:518
msgid ""
"For example, say you're installing a module distribution to your home "
"directory under Unix---but you want scripts to go in :file:`~/scripts` "
"rather than :file:`~/bin`. As you might expect, you can override this "
"directory with the :option:`!--install-scripts` option; in this case, it "
"makes most sense to supply a relative path, which will be interpreted "
"relative to the installation base directory (your home directory, in this"
" case)::"
msgstr ""
"예를 들어, 유닉스에서 홈 디렉터리에 모듈 배포를 설치한다고 합시다---하지만 스크립트가 :file:`~/bin`\\이 아닌 "
":file:`~/scripts`\\로 가기를 원합니다. 예상대로, 이 디렉터리를 :option:`!--install-scripts`"
" 옵션으로 재정의할 수 있습니다; 이 경우, 상대 경로를 제공하는 것이 가장 합리적인데, 설치 기본 디렉터리(이 경우, 홈 "
"디렉터리)에 상대적으로 해석됩니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:527
msgid ""
"Another Unix example: suppose your Python installation was built and "
"installed with a prefix of :file:`/usr/local/python`, so under a standard"
"  installation scripts will wind up in :file:`/usr/local/python/bin`.  If"
" you want them in :file:`/usr/local/bin` instead, you would supply this "
"absolute directory for the :option:`!--install-scripts` option::"
msgstr ""
"또 다른 유닉스 예: 파이썬 설치가 :file:`/usr/local/python` 접두사로 빌드되고 설치되었다고 가정하면, 표준 "
"설치 스크립트는 :file:`/usr/local/python/bin`\\으로 갑니다. 대신 "
":file:`/usr/local/bin`\\에 넣고 싶으면, :option:`!--install-scripts` 옵션에 대해 이렇게"
" 절대 디렉터리를 제공합니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:535
msgid ""
"(This performs an installation using the \"prefix scheme\", where the "
"prefix is whatever your Python interpreter was installed with--- "
":file:`/usr/local/python` in this case.)"
msgstr ""
"(이는 \"접두사 체계\"를 사용하여 설치를 수행합니다, 여기서 접두사는 파이썬 인터프리터가 설치될 때 사용된 것입니다--- 이 "
"경우 :file:`/usr/local/python`\\입니다.)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:539
msgid ""
"If you maintain Python on Windows, you might want third-party modules to "
"live in a subdirectory of :file:`{prefix}`, rather than right in "
":file:`{prefix}` itself.  This is almost as easy as customizing the "
"script installation directory---you just have to remember that there are "
"two types of modules to worry about, Python and extension modules, which "
"can conveniently be both controlled by one option::"
msgstr ""
"윈도우에서 파이썬을 유지하는 경우, 제삼자 모듈이 :file:`{prefix}` 자체가 아닌 :file:`{prefix}`\\의 "
"서브 디렉터리에 위치하기를 원할 수 있습니다. 이것은 거의 스크립트 설치 디렉터리를 사용자 정의하는 것만큼 쉽습니다---여러분은 "
"단지 두 가지 유형의 모듈, 파이썬과 확장 모듈이 있다는 것만 신경 쓰면 되는데, 둘 다 하나의 옵션으로 편리하게 제어할 수 "
"있습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:548
msgid ""
"The specified installation directory is relative to :file:`{prefix}`.  Of"
" course, you also have to ensure that this directory is in Python's "
"module search path, such as by putting a :file:`.pth` file in a site "
"directory (see :mod:`site`).  See section :ref:`inst-search-path` to find"
" out how to modify Python's search path."
msgstr ""
"지정된 설치 디렉터리는 :file:`{prefix}`\\에 상대적입니다. 물론, 가령 사이트 디렉터리에 :file:`.pth` "
"파일을 넣어서 이 디렉터리가 파이썬의 모듈 검색 경로에 있도록 해야 합니다 (:mod:`site`\\를 참조하십시오). 파이썬의 "
"검색 경로를 수정하는 방법은 섹션 :ref:`inst-search-path`\\를 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:554
msgid ""
"If you want to define an entire installation scheme, you just have to "
"supply all of the installation directory options.  The recommended way to"
" do this is to supply relative paths; for example, if you want to "
"maintain all Python module-related files under :file:`python` in your "
"home directory, and you want a separate directory for each platform that "
"you use your home directory from, you might define the following "
"installation scheme::"
msgstr ""
"전체 설치 체계를 정의하려면, 모든 설치 디렉터리 옵션을 제공하기만 하면 됩니다. 이를 수행하는 권장 방법은 상대 경로를 제공하는 "
"것입니다; 예를 들어, 홈 디렉터리의 :file:`python` 아래에 모든 파이썬 모듈 관련 파일을 유지하고, 홈 디렉터리를 "
"사용하는 각 플랫폼에 대해 별도의 디렉터리를 원하면, 다음 설치 체계를 정의할 수 있습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:567
msgid "or, equivalently, ::"
msgstr "또는, 동등하게, ::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:575
msgid ""
"``$PLAT`` is not (necessarily) an environment variable---it will be "
"expanded by the Distutils as it parses your command line options, just as"
" it does when parsing your configuration file(s)."
msgstr ""
"``$PLAT``\\은 환경 변수가 아닙니다---구성 파일을 구문 분석할 때와 마찬가지로 명령 줄 옵션을 구문 분석할 때 "
"Distutils에 의해 확장됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:579
msgid ""
"Obviously, specifying the entire installation scheme every time you "
"install a new module distribution would be very tedious.  Thus, you can "
"put these options into your Distutils config file (see section :ref"
":`inst-config-files`):"
msgstr ""
"분명히, 새로운 모듈 배포판을 설치할 때마다 전체 설치 체계를 지정하는 것은 매우 지루할 것입니다. 따라서, 이러한 옵션을 "
"Distutils 구성 파일에 넣을 수 있습니다 (섹션 :ref:`inst-config-files`\\을 참조하십시오):"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:592
msgid "or, equivalently,"
msgstr "또는, 동등하게,"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:603
msgid ""
"Note that these two are *not* equivalent if you supply a different "
"installation base directory when you run the setup script.  For example, "
"::"
msgstr "설정 스크립트를 실행할 때 다른 설치 기본 디렉터리를 제공하면 이 두 가지는 동등하지 *않음에* 유의하십시오. 예를 들어, ::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:608
msgid ""
"would install pure modules to :file:`/tmp/python/lib` in the first case, "
"and to :file:`/tmp/lib` in the second case.  (For the second case, you "
"probably want to supply an installation base of :file:`/tmp/python`.)"
msgstr ""
"은 첫 번째 경우에는 :file:`/tmp/python/lib`\\에, 두 번째 경우에는 :file:`/tmp/lib`\\에 순수 "
"모듈을 설치합니다. (두 번째 경우에는, :file:`/tmp/python`\\으로 설치 기본 디렉터리를 제공하고 싶을 것입니다.)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:612
msgid ""
"You probably noticed the use of ``$HOME`` and ``$PLAT`` in the sample "
"configuration file input.  These are Distutils configuration variables, "
"which bear a strong resemblance to environment variables. In fact, you "
"can use environment variables in config files on platforms that have such"
" a notion but the Distutils additionally define a few extra variables "
"that may not be in your environment, such as ``$PLAT``.  (And of course, "
"on systems that don't have environment variables, such as Mac OS 9, the "
"configuration variables supplied by the Distutils are the only ones you "
"can use.) See section :ref:`inst-config-files` for details."
msgstr ""
"아마도 샘플 구성 파일 입력에서 ``$HOME``\\과 ``$PLAT``\\을 사용하는 것을 눈치챘을 것입니다. 이들은 환경 변수와"
" 매우 유사한 Distutils 구성 변수입니다. 실제로, 이러한 개념이 있는 플랫폼의 구성 파일에서 환경 변수를 사용할 수 "
"있지만, Distutils는 ``$PLAT``\\과 같이 사용자 환경에 없을 수 있는 몇 가지 추가 변수를 정의합니다. (그리고 "
"물론, Mac OS 9와 같이 환경 변수가 없는 시스템에서는, Distutils가 제공하는 구성 변수만 사용할 수 있습니다.) "
"자세한 내용은 섹션 :ref:`inst-config-files`\\을 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:622
msgid ""
"When a :ref:`virtual environment <venv-def>` is activated, any options "
"that change the installation path will be ignored from all distutils "
"configuration files to prevent inadvertently installing projects outside "
"of the virtual environment."
msgstr ""
":ref:`가상 환경 <venv-def>`\\이 활성화되면, 가상 환경 외부에 프로젝트를 실수로 설치하는 것을 방지하기 위해 모든 "
"distutils 구성 파일에서 설치 경로를 변경하는 모든 옵션이 무시됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:636
msgid "Modifying Python's Search Path"
msgstr "파이썬의 검색 경로 수정하기"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:638
msgid ""
"When the Python interpreter executes an :keyword:`import` statement, it "
"searches for both Python code and extension modules along a search path."
"  A default value for the path is configured into the Python binary when "
"the interpreter is built. You can determine the path by importing the "
":mod:`sys` module and printing the value of ``sys.path``.   ::"
msgstr ""
"파이썬 인터프리터가 :keyword:`import` 문을 실행할 때, 검색 경로를 따라 파이썬 코드와 확장 모듈을 모두 검색합니다."
" 경로의 기본값은 인터프리터가 빌드될 때 파이썬 바이너리에 구성됩니다. :mod:`sys` 모듈을 임포트 해서 "
"``sys.path`` 값을 인쇄하여 경로를 파악할 수 있습니다. ::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:655
msgid "The null string in ``sys.path`` represents the current working directory."
msgstr "``sys.path``\\의 빈 문자열은 현재 작업 디렉터리를 나타냅니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:657
msgid ""
"The expected convention for locally installed packages is to put them in "
"the :file:`{...}/site-packages/` directory, but you may want to install "
"Python modules into some arbitrary directory.  For example, your site may"
" have a convention of keeping all software related to the web server "
"under :file:`/www`. Add-on Python modules might then belong in "
":file:`/www/python`, and in order to import them, this directory must be "
"added to ``sys.path``.  There are several different ways to add the "
"directory."
msgstr ""
"로컬에 설치된 패키지에 대해 기대되는 규칙은 패키지를 :file:`{...}/site-packages/` 디렉터리에 넣는 것이지만,"
" 파이썬 모듈을 임의의 디렉터리에 설치하고 싶을 수 있습니다. 예를 들어, 사이트에 웹 서버와 관련된 모든 소프트웨어를 "
":file:`/www`\\에 유지하는 규칙이 있을 수 있습니다. 그러면 애드온 파이썬 모듈은 "
":file:`/www/python`\\에 속할 수 있으며, 이를 임포트 하려면, 이 디렉터리를 ``sys.path``\\에 추가해야"
" 합니다. 디렉터리를 추가하는 방법은 여러 가지가 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:665
msgid ""
"The most convenient way is to add a path configuration file to a "
"directory that's already on Python's path, usually to the :file"
":`.../site-packages/` directory.  Path configuration files have an "
"extension of :file:`.pth`, and each line must contain a single path that "
"will be appended to ``sys.path``.  (Because the new paths are appended to"
" ``sys.path``, modules in the added directories will not override "
"standard modules.  This means you can't use this mechanism for installing"
" fixed versions of standard modules.)"
msgstr ""
"가장 편리한 방법은 이미 파이썬의 경로에 있는 디렉터리(일반적으로 :file:`.../site-packages/` 디렉터리)에 경로"
" 구성 파일을 추가하는 것입니다. 경로 구성 파일의 확장자는 :file:`.pth`\\이며, 각 줄에는 ``sys.path``\\에"
" 추가될 단일 경로가 포함되어야 합니다. (새 경로가 ``sys.path``\\에 추가되기 때문에, 추가된 디렉터리의 모듈은 표준 "
"모듈을 재정의하지 않습니다. 이는 표준 모듈의 수정된 버전을 설치하는데 이 메커니즘을 사용할 수 없음을 의미합니다.)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:673
msgid ""
"Paths can be absolute or relative, in which case they're relative to the "
"directory containing the :file:`.pth` file.  See the documentation of the"
" :mod:`site` module for more information."
msgstr ""
"경로는 절대나 상대일 수 있으며, 상대인 경우 :file:`.pth` 파일을 포함하는 디렉터리에 상대적입니다. 자세한 내용은 "
":mod:`site` 모듈 설명서를 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:677
msgid ""
"A slightly less convenient way is to edit the :file:`site.py` file in "
"Python's standard library, and modify ``sys.path``.  :file:`site.py` is "
"automatically imported when the Python interpreter is executed, unless "
"the :option:`-S` switch is supplied to suppress this behaviour.  So you "
"could simply edit :file:`site.py` and add two lines to it:"
msgstr ""
"약간 덜 편리한 방법은 파이썬의 표준 라이브러리에 있는 :file:`site.py` 파일을 편집하고, ``sys.path``\\를 "
"수정하는 것입니다. 이 동작을 억제하기 위해 :option:`-S` 스위치가 제공되지 않는 한, 파이썬 인터프리터가 실행될 때 "
":file:`site.py`\\를 자동으로 임포트 합니다. 따라서 간단히 :file:`site.py`\\를 편집하여 두 줄을 추가할"
" 수 있습니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:688
msgid ""
"However, if you reinstall the same major version of Python (perhaps when "
"upgrading from 2.2 to 2.2.2, for example) :file:`site.py` will be "
"overwritten by the stock version.  You'd have to remember that it was "
"modified and save a copy before doing the installation."
msgstr ""
"그러나, 같은 주 버전의 파이썬을 다시 설치하면 (아마도 예를 들어 2.2에서 2.2.2로 업그레이드 할 때) "
":file:`site.py`\\가 기본 버전으로 덮어 쓰입니다. 설치하기 전에 수정된 것을 기억하고 사본을 저장해야 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:693
msgid ""
"There are two environment variables that can modify ``sys.path``. "
":envvar:`PYTHONHOME` sets an alternate value for the prefix of the Python"
" installation.  For example, if :envvar:`PYTHONHOME` is set to "
"``/www/python``, the search path will be set to ``['', "
"'/www/python/lib/pythonX.Y/', '/www/python/lib/pythonX.Y/plat-linux2', "
"...]``."
msgstr ""
"``sys.path``\\를 수정할 수 있는 두 가지 환경 변수가 있습니다. :envvar:`PYTHONHOME`\\은 파이썬 설치"
" 접두사에 대한 대안 값을 설정합니다. 예를 들어, :envvar:`PYTHONHOME` 을 ``/www/python``\\으로 "
"설정하면, 검색 경로가 ``['', '/www/python/lib/pythonX.Y/', "
"'/www/python/lib/pythonX.Y/plat-linux2', ...]``\\로 설정됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:699
msgid ""
"The :envvar:`PYTHONPATH` variable can be set to a list of paths that will"
" be added to the beginning of ``sys.path``.  For example, if "
":envvar:`PYTHONPATH` is set to ``/www/python:/opt/py``, the search path "
"will begin with ``['/www/python', '/opt/py']``.  (Note that directories "
"must exist in order to be added to ``sys.path``; the :mod:`site` module "
"removes paths that don't exist.)"
msgstr ""
":envvar:`PYTHONPATH` 변수는 ``sys.path``\\의 시작 부분에 추가될 경로 목록으로 설정할 수 있습니다. "
"예를 들어, :envvar:`PYTHONPATH`\\가 ``/www/python:/opt/py``\\로 설정되면, 검색 경로는 "
"``['/www/python', '/opt/py']``\\로 시작합니다. (``sys.path``\\에 추가되려면 디렉터리가 "
"존재해야 함에 유의하십시오; :mod:`site` 모듈은 존재하지 않는 경로를 제거합니다.)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:706
msgid ""
"Finally, ``sys.path`` is just a regular Python list, so any Python "
"application can modify it by adding or removing entries."
msgstr ""
"마지막으로, ``sys.path``\\는 일반적인 파이썬 리스트이므로, 모든 파이썬 응용 프로그램은 항목을 추가하거나 제거하여 "
"수정할 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:713
msgid "Distutils Configuration Files"
msgstr "Distutils 구성 파일"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:715
msgid ""
"As mentioned above, you can use Distutils configuration files to record "
"personal or site preferences for any Distutils options.  That is, any "
"option to any command can be stored in one of two or three (depending on "
"your platform) configuration files, which will be consulted before the "
"command-line is parsed. This means that configuration files will override"
" default values, and the command-line will in turn override configuration"
" files.  Furthermore, if multiple configuration files apply, values from "
"\"earlier\" files are overridden by \"later\" files."
msgstr ""
"위에서 언급했듯이, Distutils 구성 파일을 사용하여 모든 Distutils 옵션에 대한 개인이나 사이트 기본 설정을 기록할 "
"수 있습니다. 즉, 모든 명령에 대한 모든 옵션이 2개나 3개의 (플랫폼에 따라 다릅니다) 구성 파일 중 하나에 저장될 수 있으며,"
" 명령 줄이 구문 분석되기 전에 참조됩니다. 이는 구성 파일이 기본값을 재정의하고, 명령 줄이 그 후에 구성 파일을 재정의함을 "
"의미합니다. 또한, 여러 구성 파일이 적용되는 경우, \"이전\" 파일의 값이 \"나중\" 파일에 의해 재정의됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:728
msgid "Location and names of config files"
msgstr "구성 파일의 위치와 이름"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:730
msgid ""
"The names and locations of the configuration files vary slightly across "
"platforms.  On Unix and Mac OS X, the three configuration files (in the "
"order they are processed) are:"
msgstr ""
"구성 파일의 이름과 위치는 플랫폼에 따라 약간씩 다릅니다. 유닉스와 Mac OS X에서, 세 가지 구성 파일(처리되는 순서에 "
"따라)은 다음과 같습니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:735
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:747
msgid "Location and filename"
msgstr "위치와 파일명"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:737
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:749
msgid "system"
msgstr "시스템"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:737
msgid ":file:`{prefix}/lib/python{ver}/distutils/distutils.cfg`"
msgstr ":file:`{prefix}/lib/python{ver}/distutils/distutils.cfg`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:739
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:751
msgid "personal"
msgstr "개인"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:739
msgid ":file:`$HOME/.pydistutils.cfg`"
msgstr ":file:`$HOME/.pydistutils.cfg`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:741
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:753
msgid "local"
msgstr "로컬"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:741
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:753
msgid ":file:`setup.cfg`"
msgstr ":file:`setup.cfg`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:741
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:753
msgid "\\(3)"
msgstr "\\(3)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:744
msgid "And on Windows, the configuration files are:"
msgstr "그리고 윈도우에서, 구성 파일은 다음과 같습니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:749
msgid ":file:`{prefix}\\\\Lib\\\\distutils\\\\distutils.cfg`"
msgstr ":file:`{prefix}\\\\Lib\\\\distutils\\\\distutils.cfg`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:749
msgid "\\(4)"
msgstr "\\(4)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:751
msgid ":file:`%HOME%\\\\pydistutils.cfg`"
msgstr ":file:`%HOME%\\\\pydistutils.cfg`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:751
msgid "\\(5)"
msgstr "\\(5)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:756
msgid ""
"On all platforms, the \"personal\" file can be temporarily disabled by "
"passing the `--no-user-cfg` option."
msgstr "모든 플랫폼에서, \"개인\" 파일은 `--no-user-cfg` 옵션을 전달하여 일시적으로 비활성화 할 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:762
msgid ""
"Strictly speaking, the system-wide configuration file lives in the "
"directory where the Distutils are installed; under Python 1.6 and later "
"on Unix, this is as shown. For Python 1.5.2, the Distutils will normally "
"be installed to :file:`{prefix}/lib/python1.5/site-packages/distutils`, "
"so the system configuration file should be put there under Python 1.5.2."
msgstr ""
"엄밀히 말하면, 시스템 전체 구성 파일은 Distutils가 설치된 디렉터리에 있습니다; 유닉스의 파이썬 1.6 이상에서는, 표시된"
" 것과 같습니다. 파이썬 1.5.2의 경우, Distutils는 일반적으로 :file:`{prefix}/lib/python1.5"
"/site-packages/distutils`\\에 설치되므로, 시스템 구성 파일은 파이썬 1.5.2 에서는 그곳에 넣어야 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:769
msgid ""
"On Unix, if the :envvar:`HOME` environment variable is not defined, the "
"user's home directory will be determined with the :func:`getpwuid` "
"function from the standard :mod:`pwd` module. This is done by the "
":func:`os.path.expanduser` function used by Distutils."
msgstr ""
"유닉스에서, :envvar:`HOME` 환경 변수가 정의되지 않으면, 사용자의 홈 디렉터리는 표준 :mod:`pwd` 모듈의 "
":func:`getpwuid` 함수로 결정됩니다. 이것은 Distutils에서 사용하는 "
":func:`os.path.expanduser` 함수에 의해 수행됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:775
msgid "I.e., in the current directory (usually the location of the setup script)."
msgstr "즉, 현재 디렉터리에 (일반적으로 설정 스크립트의 위치)."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:778
msgid ""
"(See also note (1).)  Under Python 1.6 and later, Python's default "
"\"installation prefix\" is :file:`C:\\\\Python`, so the system "
"configuration file is normally "
":file:`C:\\\\Python\\\\Lib\\\\distutils\\\\distutils.cfg`. Under Python "
"1.5.2, the default prefix was :file:`C:\\\\Program Files\\\\Python`, and "
"the Distutils were not part of the standard library---so the system "
"configuration file would be :file:`C:\\\\Program "
"Files\\\\Python\\\\distutils\\\\distutils.cfg` in a standard Python 1.5.2"
" installation under Windows."
msgstr ""
"(노트 (1)도 참조하십시오.) 파이썬 1.6 이상에서, 파이썬의 기본 \"설치 접두사\"는 "
":file:`C:\\\\Python`\\이므로, 시스템 구성 파일은 일반적으로 "
":file:`C:\\\\Python\\\\Lib\\\\distutils\\\\distutils.cfg`\\입니다. 파이썬 "
"1.5.2에서, 기본 접두사는 :file:`C:\\\\Program Files\\\\Python`\\였고, Distutils는 표준"
" 라이브러리의 일부가 아니었습니다---따라서 시스템 구성 파일은 윈도우의 표준 파이썬 1.5.2 설치에서 "
":file:`C:\\\\Program Files\\\\Python\\\\distutils\\\\distutils.cfg`\\입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:787
msgid ""
"On Windows, if the :envvar:`HOME` environment variable is not defined, "
":envvar:`USERPROFILE` then :envvar:`HOMEDRIVE` and :envvar:`HOMEPATH` "
"will be tried. This is done by the :func:`os.path.expanduser` function "
"used by Distutils."
msgstr ""
"윈도우에서, :envvar:`HOME` 환경 변수가 정의되지 않으면, :envvar:`USERPROFILE` 다음에 "
":envvar:`HOMEDRIVE`\\와 :envvar:`HOMEPATH`\\가 시도됩니다. 이것은 Distutils에서 사용하는 "
":func:`os.path.expanduser` 함수에 의해 수행됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:796
msgid "Syntax of config files"
msgstr "구성 파일 문법"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:798
msgid ""
"The Distutils configuration files all have the same syntax.  The config "
"files are grouped into sections.  There is one section for each Distutils"
" command, plus a ``global`` section for global options that affect every "
"command.  Each section consists of one option per line, specified as "
"``option=value``."
msgstr ""
"Distutils 구성 파일은 모두 같은 문법을 갖습니다. 구성 파일은 섹션으로 그룹화됩니다. Distutils 명령마다 하나의 "
"섹션이 있고, 여기에 더해 모든 명령에 영향을 미치는 전역 옵션에 대한 ``global`` 섹션이 있습니다. 각 섹션은 "
"``option=value``\\로 지정되는 줄당 하나의 옵션으로 구성됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:803
msgid ""
"For example, the following is a complete config file that just forces all"
" commands to run quietly by default:"
msgstr "예를 들어, 다음은 모든 명령이 기본적으로 조용히 실행되도록 하는 완전한 구성 파일입니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:811
msgid ""
"If this is installed as the system config file, it will affect all "
"processing of any Python module distribution by any user on the current "
"system.  If it is installed as your personal config file (on systems that"
" support them), it will affect only module distributions processed by "
"you.  And if it is used as the :file:`setup.cfg` for a particular module "
"distribution, it affects only that distribution."
msgstr ""
"이것이 시스템 구성 파일로 설치되면, 현재 시스템의 모든 사용자에 의한 모든 파이썬 모듈 배포 처리에 영향을 줍니다. 개인 구성 "
"파일로 설치되면 (지원하는 시스템에서), 사용자가 처리하는 모듈 배포에만 영향을 줍니다. 그리고 특정 모듈 배포에 대한 "
":file:`setup.cfg`\\로 사용되면, 해당 배포에만 영향을 줍니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:818
msgid ""
"You could override the default \"build base\" directory and make the "
":command:`build\\*` commands always forcibly rebuild all files with the "
"following:"
msgstr ""
"다음을 사용하여 기본 \"빌드 기본(build base)\" 디렉터리를 재정의하고 :command:`build\\*` 명령이 항상 "
"모든 파일을 강제로 다시 빌드하도록 할 수 있습니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:828
msgid "which corresponds to the command-line arguments ::"
msgstr "이는 다음과 같은 명령 줄 인자에 해당합니다 ::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:832
msgid ""
"except that including the :command:`build` command on the command-line "
"means that command will be run.  Including a particular command in config"
" files has no such implication; it only means that if the command is run,"
" the options in the config file will apply.  (Or if other commands that "
"derive values from it are run, they will use the values in the config "
"file.)"
msgstr ""
"명령 줄에 :command:`build` 명령을 포함하는 것은 명령이 실행된다는 것을 의미한다는 점만 다릅니다. 구성 파일에 특정 "
"명령을 포함하는 것은 그러한 의미가 없습니다; 명령이 실행된다면, 구성 파일의 옵션이 적용된다는 의미일 뿐입니다. (또는 그것에서 "
"값을 파생하는 다른 명령이 실행되면, 그들은 구성 파일의 값을 사용합니다.)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:838
msgid ""
"You can find out the complete list of options for any command using the "
":option:`!--help` option, e.g.::"
msgstr ":option:`!--help` 옵션을 사용해서 모든 명령에 대한 전체 옵션 목록을 찾을 수 있습니다. 예를 들어::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:843
msgid ""
"and you can find out the complete list of global options by using "
":option:`!--help` without a command::"
msgstr "그리고 명령 없이 :option:`!--help`\\를 사용하여 전역 옵션의 전체 목록을 찾을 수 있습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:848
msgid ""
"See also the \"Reference\" section of the \"Distributing Python Modules\""
" manual."
msgstr "\"파이썬 모듈 배포\" 매뉴얼의 \"레퍼런스\" 섹션도 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:854
msgid "Building Extensions: Tips and Tricks"
msgstr "확장 빌드하기: 팁과 요령"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:856
msgid ""
"Whenever possible, the Distutils try to use the configuration information"
" made available by the Python interpreter used to run the "
":file:`setup.py` script. For example, the same compiler and linker flags "
"used to compile Python will also be used for compiling extensions.  "
"Usually this will work well, but in complicated situations this might be "
"inappropriate.  This section discusses how to override the usual "
"Distutils behaviour."
msgstr ""
"가능하면, Distutils는 :file:`setup.py` 스크립트를 실행하는 데 사용되는 파이썬 인터프리터에서 제공하는 구성 "
"정보를 사용하려고 합니다. 예를 들어, 파이썬을 컴파일하는 데 사용된 같은 컴파일러와 링커 플래그가 확장 컴파일에도 사용됩니다. "
"일반적으로 이것은 잘 작동하지만, 복잡한 상황에서는 부적절 할 수 있습니다. 이 섹션에서는 일반적인 Distutils 동작을 "
"재정의하는 방법에 관해 설명합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:867
msgid "Tweaking compiler/linker flags"
msgstr "컴파일러/링커 플래그 조정하기"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:869
msgid ""
"Compiling a Python extension written in C or C++ will sometimes require "
"specifying custom flags for the compiler and linker in order to use a "
"particular library or produce a special kind of object code. This is "
"especially true if the extension hasn't been tested on your platform, or "
"if you're trying to cross-compile Python."
msgstr ""
"C나 C++로 작성된 파이썬 확장을 컴파일하려면 특정 라이브러리를 사용하거나 특별한 종류의 오브젝트 코드를 생성하기 위해 컴파일러와"
" 링커에 대해 사용자 지정 플래그를 지정해야 하는 경우가 있습니다. 확장이 플랫폼에서 테스트 되지 않았거나, 파이썬을 크로스 "
"컴파일하려는 경우 특히 그렇습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:875
msgid ""
"In the most general case, the extension author might have foreseen that "
"compiling the extensions would be complicated, and provided a "
":file:`Setup` file for you to edit.  This will likely only be done if the"
" module distribution contains many separate extension modules, or if they"
" often require elaborate sets of compiler flags in order to work."
msgstr ""
"가장 일반적일 때, 확장 저자는 확장을 컴파일하는 것이 복잡할 것이라고 예상하고, 편집할 :file:`Setup` 파일을 제공했을 "
"수 있습니다. 이는 모듈 배포에 많은 개별 확장 모듈이 포함되어 있거나, 이들이 작동하기 위해 종종 정교한 컴파일러 플래그 집합이 "
"필요한 경우에만 수행됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:881
msgid ""
"A :file:`Setup` file, if present, is parsed in order to get a list of "
"extensions to build.  Each line in a :file:`Setup` describes a single "
"module.  Lines have the following structure::"
msgstr ""
"존재한다면, :file:`Setup` 파일은 빌드할 확장 목록을 얻기 위해 구문 분석됩니다. :file:`Setup`\\의 각 줄은"
" 단일 모듈을 설명합니다. 줄의 구조는 다음과 같습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:888
msgid "Let's examine each of the fields in turn."
msgstr "각 필드를 차례로 살펴보겠습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:890
msgid ""
"*module* is the name of the extension module to be built, and should be a"
" valid Python identifier.  You can't just change this in order to rename "
"a module (edits to the source code would also be needed), so this should "
"be left alone."
msgstr ""
"*module*\\은 빌드할 확장 모듈의 이름이며, 유효한 파이썬 식별자여야 합니다. 모듈의 이름을 변경하기 위해 단순히 이것을 "
"변경할 수는 없습니다 (소스 코드에 대한 편집도 필요합니다), 따라서 이것은 그대로 두어야 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:894
msgid ""
"*sourcefile* is anything that's likely to be a source code file, at least"
" judging by the filename.  Filenames ending in :file:`.c` are assumed to "
"be written in C, filenames ending in :file:`.C`, :file:`.cc`, and "
":file:`.c++` are assumed to be C++, and filenames ending in :file:`.m` or"
" :file:`.mm` are assumed to be in Objective C."
msgstr ""
"*sourcefile*\\은 최소한 파일 이름으로 판단할 때 소스 코드 파일일 가능성이 있는 모든 것입니다. "
":file:`.c`\\로 끝나는 파일명은 C로, :file:`.C`, :file:`.cc` 및 :file:`.c++`\\로 끝나는 "
"파일명은 C++로, :file:`.m`\\이나 :file:`.mm`\\으로 끝나는 파일명은 Objective C로 작성되었다고 "
"간주합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:900
msgid ""
"*cpparg* is an argument for the C preprocessor,  and is anything starting"
" with :option:`!-I`, :option:`!-D`, :option:`!-U` or :option:`!-C`."
msgstr ""
"*cpparg*\\는 C 전처리기에 대한 인자이며, :option:`!-I`, :option:`!-D`, :option:`!-U` "
"또는 :option:`!-C`\\로 시작하는 모든 것입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:903
msgid ""
"*library* is anything ending in :file:`.a` or beginning with "
":option:`!-l` or :option:`!-L`."
msgstr ""
"*library*\\는 :file:`.a`\\로 끝나거나 :option:`!-l`\\이나 :option:`!-L`\\로 시작하는 "
"모든 것입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:906
msgid ""
"If a particular platform requires a special library on your platform, you"
" can add it by editing the :file:`Setup` file and running ``python "
"setup.py build``. For example, if the module defined by the line ::"
msgstr ""
"특정 플랫폼에 플랫폼의 특수 라이브러리가 필요하면, :file:`Setup` 파일을 편집하고 ``python setup.py "
"build``\\를 실행하여 추가 할 수 있습니다. 예를 들어, 다음 줄로 정의된 모듈이 ::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:912
msgid ""
"must be linked with the math library :file:`libm.a` on your platform, "
"simply add :option:`!-lm` to the line::"
msgstr ""
"플랫폼의 수학 라이브러리 :file:`libm.a`\\와 연결되어야 하면, 간단히 :option:`!-lm`\\을 줄에 추가하면 "
"됩니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:917
msgid ""
"Arbitrary switches intended for the compiler or the linker can be "
"supplied with the :option:`!-Xcompiler` *arg* and :option:`!-Xlinker` "
"*arg* options::"
msgstr ""
"컴파일러나 링커 용인 임의의 스위치는 :option:`!-Xcompiler` *arg*\\와 :option:`!-Xlinker` "
"*arg* 옵션으로 제공될 수 있습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:922
msgid ""
"The next option after :option:`!-Xcompiler` and :option:`!-Xlinker` will "
"be appended to the proper command line, so in the above example the "
"compiler will be passed the :option:`!-o32` option, and the linker will "
"be passed :option:`!-shared`.  If a compiler option requires an argument,"
" you'll have to supply multiple :option:`!-Xcompiler` options; for "
"example, to pass ``-x c++`` the :file:`Setup` file would have to contain "
"``-Xcompiler -x -Xcompiler c++``."
msgstr ""
":option:`!-Xcompiler`\\과 :option:`!-Xlinker` 다음 옵션은 적절한 명령 줄에 추가되므로, 위의 "
"예에서 컴파일러로는 :option:`!-o32` 옵션을 전달하고, 링커로는 :option:`!-shared`\\를 전달합니다. "
"컴파일러 옵션에 인자가 필요하면, 여러 :option:`!-Xcompiler` 옵션을 제공해야 합니다; 예를 들어, ``-x "
"c++``\\를 전달하려면 :file:`Setup` 파일에 ``-Xcompiler -x -Xcompiler c++``\\가 "
"포함되어야 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:929
msgid ""
"Compiler flags can also be supplied through setting the :envvar:`CFLAGS` "
"environment variable.  If set, the contents of :envvar:`CFLAGS` will be "
"added to the compiler flags specified in the  :file:`Setup` file."
msgstr ""
":envvar:`CFLAGS` 환경 변수 설정을 통해 컴파일러 플래그를 제공할 수도 있습니다. 설정되면, "
":envvar:`CFLAGS`\\의 내용이 :file:`Setup` 파일에 지정된 컴파일러 플래그에 추가됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:937
msgid "Using non-Microsoft compilers on Windows"
msgstr "윈도우에서 비 Microsoft 컴파일러 사용하기"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:944
msgid "Borland/CodeGear C++"
msgstr "Borland/CodeGear C++"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:946
msgid ""
"This subsection describes the necessary steps to use Distutils with the "
"Borland C++ compiler version 5.5.  First you have to know that Borland's "
"object file format (OMF) is different from the format used by the Python "
"version you can download from the Python or ActiveState Web site.  "
"(Python is built with Microsoft Visual C++, which uses COFF as the object"
" file format.) For this reason you have to convert Python's library "
":file:`python25.lib` into the Borland format.  You can do this as "
"follows:"
msgstr ""
"이 서브 섹션에서는 Borland C++ 컴파일러 버전 5.5로 Distutils를 사용하는 데 필요한 단계를 설명합니다. 먼저 "
"Borland의 오브젝트 파일 형식(OMF)이 파이썬이나 ActiveState 웹 사이트에서 다운로드할 수 있는 파이썬 버전에서 "
"사용하는 형식과 다르다는 것을 알아야 합니다. (파이썬은 오브젝트 파일 형식으로 COFF를 사용하는 Microsoft Visual "
"C++로 빌드되었습니다.) 이러한 이유로 파이썬의 라이브러리 :file:`python25.lib`\\를 Borland 형식으로 "
"변환해야 합니다. 다음과 같이 할 수 있습니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:961
msgid ""
"The :file:`coff2omf` program comes with the Borland compiler.  The file "
":file:`python25.lib` is in the :file:`Libs` directory of your Python "
"installation.  If your extension uses other libraries (zlib, ...) you "
"have to convert them too."
msgstr ""
":file:`coff2omf` 프로그램은 Borland 컴파일러와 함께 제공됩니다. :file:`python25.lib` 파일은 "
"파이썬 설치의 :file:`Libs` 디렉터리에 있습니다. 확장이 다른 라이브러리(zlib, ...)를 사용하면, 그것들도 변환해야"
" 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:966
msgid ""
"The converted files have to reside in the same directories as the normal "
"libraries."
msgstr "변환된 파일은 일반 라이브러리와 같은 디렉터리에 있어야 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:969
msgid ""
"How does Distutils manage to use these libraries with their changed "
"names?  If the extension needs a library (eg. :file:`foo`) Distutils "
"checks first if it finds a library with suffix :file:`_bcpp` (eg. "
":file:`foo_bcpp.lib`) and then uses this library.  In the case it doesn't"
" find such a special library it uses the default name (:file:`foo.lib`.) "
"[#]_"
msgstr ""
"Distutils는 변경된 이름으로 이러한 라이브러리를 어떻게 사용할까요? 확장에 라이브러리(예를 들어 :file:`foo`)가 "
"필요하면 Distutils는 접미사가 :file:`_bcpp`\\(예를 들어 :file:`foo_bcpp.lib`)인 라이브러리를 "
"먼저 찾아서 이 라이브러리를 사용합니다. 이러한 특수 라이브러리를 찾지 못하면 기본 이름(:file:`foo.lib`)을 "
"사용합니다. [#]_"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:975
msgid ""
"To let Distutils compile your extension with Borland C++ you now have to "
"type::"
msgstr "Distutils가 Borland C++로 확장을 컴파일하도록 하려면 다음을 입력해야 합니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:979
msgid ""
"If you want to use the Borland C++ compiler as the default, you could "
"specify this in your personal or system-wide configuration file for "
"Distutils (see section :ref:`inst-config-files`.)"
msgstr ""
"Borland C++ 컴파일러를 기본값으로 사용하려면, Distutils에 대한 개인이나 시스템 전체 구성 파일에 이를 지정할 수 "
"있습니다 (섹션 :ref:`inst-config-files`\\을 참조하십시오)."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:988
msgid "`C++Builder Compiler <https://www.embarcadero.com/products>`_"
msgstr "`C++Builder Compiler <https://www.embarcadero.com/products>`_"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:987
msgid ""
"Information about the free C++ compiler from Borland, including links to "
"the download pages."
msgstr "Borland의 무료 C++ 컴파일러에 대한 정보, 다운로드 페이지에 대한 링크를 포함합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:991
msgid ""
"`Creating Python Extensions Using Borland's Free Compiler "
"<http://www.cyberus.ca/~g_will/pyExtenDL.shtml>`_"
msgstr ""
"`Creating Python Extensions Using Borland's Free Compiler "
"<http://www.cyberus.ca/~g_will/pyExtenDL.shtml>`_"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:991
msgid ""
"Document describing how to use Borland's free command-line C++ compiler "
"to build Python."
msgstr "Borland의 무료 명령 줄 C++ 컴파일러를 사용하여 파이썬을 빌드하는 방법을 설명하는 문서."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:996
msgid "GNU C / Cygwin / MinGW"
msgstr "GNU C / Cygwin / MinGW"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:998
msgid ""
"This section describes the necessary steps to use Distutils with the GNU "
"C/C++ compilers in their Cygwin and MinGW distributions. [#]_ For a "
"Python interpreter that was built with Cygwin, everything should work "
"without any of these following steps."
msgstr ""
"이 섹션에서는 Cygwin과 MinGW 배포판에 있는 GNU C/C++ 컴파일러로 Distutils를 사용하는 데 필요한 단계를 "
"설명합니다. [#]_ Cygwin으로 빌드된 파이썬 인터프리터의 경우, 다음 단계 없이 모든 것이 작동해야 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1003
msgid ""
"Not all extensions can be built with MinGW or Cygwin, but many can.  "
"Extensions most likely to not work are those that use C++ or depend on "
"Microsoft Visual C extensions."
msgstr ""
"모든 확장이 MinGW나 Cygwin으로 빌드될 수 있는 것은 아니지만, 많은 것들이 가능합니다. 작동하지 않을 가능성이 가장 높은"
" 확장은 C++를 사용하거나 Microsoft Visual C 확장에 의존하는 확장입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1007
msgid "To let Distutils compile your extension with Cygwin you have to type::"
msgstr "Distutils가 Cygwin으로 확장을 컴파일하도록 하려면 다음을 입력해야 합니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1011
msgid "and for Cygwin in no-cygwin mode [#]_ or for MinGW type::"
msgstr "그리고 no-cygwin 모드의 Cygwin [#]_ 또는 MinGW의 경우 다음을 입력합니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1015
msgid ""
"If you want to use any of these options/compilers as default, you should "
"consider writing it in your personal or system-wide configuration file "
"for Distutils (see section :ref:`inst-config-files`.)"
msgstr ""
"이러한 옵션/컴파일러를 기본값으로 사용하려면, Distutils에 대한 개인이나 시스템 전체 구성 파일에 작성하는 것을 고려해야 "
"합니다 (섹션 :ref:`inst-config-files`\\을 참조하십시오)."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1020
msgid "Older Versions of Python and MinGW"
msgstr "이전 버전의 파이썬과 MinGW"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1021
msgid ""
"The following instructions only apply if you're using a version of Python"
" inferior to 2.4.1 with a MinGW inferior to 3.0.0 (with "
"binutils-2.13.90-20030111-1)."
msgstr ""
"다음 지침은 3.0.0(binutils-2.13.90-20030111-1 사용)보다 낮은 MinGW와 함께 2.4.1보다 낮은 "
"파이썬 버전을 사용하는 경우에만 적용됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1025
msgid ""
"These compilers require some special libraries.  This task is more "
"complex than for Borland's C++, because there is no program to convert "
"the library.  First you have to create a list of symbols which the Python"
" DLL exports. (You can find a good program for this task at "
"https://sourceforge.net/projects/mingw/files/MinGW/Extension/pexports/)."
msgstr ""
"이러한 컴파일러에는 몇 가지 특수 라이브러리가 필요합니다. 라이브러리를 변환할 프로그램이 없기 때문에, 이 작업은 Borland의 "
"C++보다 더 복잡합니다. 먼저 파이썬 DLL이 내보내는 심볼 목록을 만들어야 합니다. "
"(https://sourceforge.net/projects/mingw/files/MinGW/Extension/pexports/ "
"에서 이 작업에 적합한 프로그램을 찾을 수 있습니다.)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1038
msgid ""
"The location of an installed :file:`python25.dll` will depend on the "
"installation options and the version and language of Windows.  In a "
"\"just for me\" installation, it will appear in the root of the "
"installation directory.  In a shared installation, it will be located in "
"the system directory."
msgstr ""
"설치된 :file:`python25.dll`\\의 위치는 설치 옵션과 윈도우 버전 및 언어에 따라 다릅니다. \"나만을 위한\" "
"설치에서는, 설치 디렉터리의 루트에 나타납니다. 공유 설치에서는, 시스템 디렉터리에 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1043
msgid "Then you can create from these information an import library for gcc. ::"
msgstr "그런 다음 이러한 정보로 gcc 용 임포트 라이브러리를 만들 수 있습니다. ::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1047
msgid ""
"The resulting library has to be placed in the same directory as "
":file:`python25.lib`. (Should be the :file:`libs` directory under your "
"Python installation directory.)"
msgstr ""
"결과 라이브러리는 :file:`python25.lib`\\와 같은 디렉터리에 있어야 합니다. (파이썬 설치 디렉터리 아래의 "
":file:`libs` 디렉터리여야 합니다.)"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1051
msgid ""
"If your extension uses other libraries (zlib,...) you might  have to "
"convert them too. The converted files have to reside in the same "
"directories as the normal libraries do."
msgstr ""
"확장이 다른 라이브러리(zlib, ...)를 사용하면, 그것들도 변환해야 할 수 있습니다. 변환된 파일은 일반 라이브러리와 같은 "
"디렉터리에 있어야 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1058
msgid ""
"`Building Python modules on MS Windows platform with MinGW "
"<http://old.zope.org/Members/als/tips/win32_mingw_modules>`_"
msgstr ""
"`Building Python modules on MS Windows platform with MinGW "
"<http://old.zope.org/Members/als/tips/win32_mingw_modules>`_"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1059
msgid ""
"Information about building the required libraries for the MinGW "
"environment."
msgstr "MinGW 환경에서 필요한 라이브러리를 빌드하는 방법에 대한 정보."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1063
msgid "Footnotes"
msgstr "각주"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1064
msgid ""
"This also means you could replace all existing COFF-libraries with OMF-"
"libraries of the same name."
msgstr "이는 또한 기존의 모든 COFF 라이브러리를 같은 이름의 OMF 라이브러리로 바꿀 수 있음을 의미합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1067
msgid ""
"Check https://www.sourceware.org/cygwin/ and http://www.mingw.org/ for "
"more information"
msgstr ""
"자세한 내용은 https://www.sourceware.org/cygwin/ 및 http://www.mingw.org/ 를 "
"확인하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/install/index.rst:1070
msgid ""
"Then you have no POSIX emulation available, but you also don't need "
":file:`cygwin1.dll`."
msgstr "그러면 POSIX 에뮬레이션을 사용할 수 없지만, :file:`cygwin1.dll`\\도 필요하지 않습니다."

