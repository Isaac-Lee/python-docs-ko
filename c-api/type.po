# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-08 03:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:6
msgid "Type Objects"
msgstr "형 객체"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:13
msgid "The C structure of the objects used to describe built-in types."
msgstr "내장형을 기술하는 데 사용되는 객체의 C 구조체."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:18
msgid ""
"This is the type object for type objects; it is the same object as "
":class:`type` in the Python layer."
msgstr "이것은 형 객체의 형 객체입니다; 파이썬 계층의 :class:`type`\\과 같은 객체입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:24
#, fuzzy
msgid ""
"Return non-zero if the object *o* is a type object, including instances "
"of types derived from the standard type object.  Return 0 in all other "
"cases."
msgstr "객체 *o*\\가 표준형 객체에서 파생된 형의 인스턴스를 포함하여 형 객체면 참을 반환합니다. 다른 모든 경우 거짓을 반환합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:30
#, fuzzy
msgid ""
"Return non-zero if the object *o* is a type object, but not a subtype of "
"the standard type object.  Return 0 in all other cases."
msgstr "객체 *o*\\가 형 객체이지만, 표준형 객체의 서브 형이 아니면 참을 반환합니다. 다른 모든 경우 거짓을 반환합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:36
msgid "Clear the internal lookup cache. Return the current version tag."
msgstr "내부 조회 캐시를 지웁니다. 현재의 버전 태그를 반환합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:40
msgid ""
"Return the :c:member:`~PyTypeObject.tp_flags` member of *type*. This "
"function is primarily meant for use with `Py_LIMITED_API`; the individual"
" flag bits are guaranteed to be stable across Python releases, but access"
" to :c:member:`~PyTypeObject.tp_flags` itself is not part of the limited "
"API."
msgstr ""
"*type*\\의 :c:member:`~PyTypeObject.tp_flags` 멤버를 반환합니다. 이 함수는 주로 "
"`Py_LIMITED_API`\\와 함께 사용하기 위한 것입니다; 개별 플래그 비트는 파이썬 배포 간에 안정적인 것으로 보장되지만,"
" :c:member:`~PyTypeObject.tp_flags` 자체에 대한 액세스는 제한된 API 일부가 아닙니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:47
msgid "The return type is now ``unsigned long`` rather than ``long``."
msgstr "반환형은 이제 ``long``\\이 아니라 ``unsigned long``\\입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:53
msgid ""
"Invalidate the internal lookup cache for the type and all of its "
"subtypes.  This function must be called after any manual modification of "
"the attributes or base classes of the type."
msgstr ""
"형과 그것의 모든 서브 형에 대한 내부 검색 캐시를 무효로 합니다. 형의 어트리뷰트나 베이스 클래스를 수동으로 수정한 후에는 이 "
"함수를 호출해야 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:60
#, fuzzy
msgid ""
"Return non-zero if the type object *o* sets the feature *feature*. Type "
"features are denoted by single bit flags."
msgstr "형 객체 *o*\\가 기능 *feature*\\를 설정하면 참을 반환합니다. 형 기능은 단일 비트 플래그로 표시됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:66
msgid ""
"Return true if the type object includes support for the cycle detector; "
"this tests the type flag :const:`Py_TPFLAGS_HAVE_GC`."
msgstr ""
"형 객체가 순환 검출기에 대한 지원을 포함하고 있으면 참을 반환합니다. 이것은 형 플래그 "
":const:`Py_TPFLAGS_HAVE_GC`\\를 검사합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:72
msgid "Return true if *a* is a subtype of *b*."
msgstr "*a*\\가 *b*\\의 서브 형이면 참을 반환합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:74
msgid ""
"This function only checks for actual subtypes, which means that "
":meth:`~class.__subclasscheck__` is not called on *b*.  Call "
":c:func:`PyObject_IsSubclass` to do the same check that "
":func:`issubclass` would do."
msgstr ""
"이 함수는 실제 서브 형만 검사합니다. 즉, :meth:`~class.__subclasscheck__`\\가 *b*\\에 대해 "
"호출되지 않습니다. :func:`issubclass`\\가 수행하는 것과 같은 검사를 하려면 "
":c:func:`PyObject_IsSubclass`\\를 호출하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:82
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_alloc` slot of a type"
" object.  Use Python's default memory allocation mechanism to allocate a "
"new instance and initialize all its contents to ``NULL``."
msgstr ""
"형 객체의 :c:member:`~PyTypeObject.tp_alloc` 슬롯을 위한 일반 처리기. 파이썬의 기본 메모리 할당 "
"메커니즘을 사용하여 새 인스턴스를 할당하고 모든 내용을 ``NULL``\\로 초기화합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:88
msgid ""
"Generic handler for the :c:member:`~PyTypeObject.tp_new` slot of a type "
"object.  Create a new instance using the type's "
":c:member:`~PyTypeObject.tp_alloc` slot."
msgstr ""
"형 객체의 :c:member:`~PyTypeObject.tp_new` 슬롯을 위한 일반 처리기. 형의 "
":c:member:`~PyTypeObject.tp_alloc` 슬롯을 사용하여 새 인스턴스를 만듭니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:93
msgid ""
"Finalize a type object.  This should be called on all type objects to "
"finish their initialization.  This function is responsible for adding "
"inherited slots from a type's base class.  Return ``0`` on success, or "
"return ``-1`` and sets an exception on error."
msgstr ""
"형 개체를 마무리합니다. 초기화를 완료하려면 모든 형 객체에 대해 이 메서드를 호출해야 합니다. 이 함수는 형의 베이스 클래스에서 "
"상속된 슬롯을 추가합니다. 성공 시 ``0``\\을 반환하고, 오류 시 ``-1``\\을 반환하고 예외를 설정합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:100
msgid ""
"Return the function pointer stored in the given slot. If the result is "
"``NULL``, this indicates that either the slot is ``NULL``, or that the "
"function was called with invalid parameters. Callers will typically cast "
"the result pointer into the appropriate function type."
msgstr ""
"지정된 슬롯에 저장된 함수 포인터를 반환합니다. 결과가 ``NULL``\\이면, 슬롯이 ``NULL``\\이거나 함수가 유효하지 "
"않은 매개 변수로 호출되었음을 나타냅니다. 호출자는 일반적으로 결과 포인터를 적절한 함수 형으로 캐스팅합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:106
msgid ""
"See :c:member:`PyType_Slot.slot` for possible values of the *slot* "
"argument."
msgstr "*slot* 인자의 가능한 값은 :c:member:`PyType_Slot.slot`\\을 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:108
msgid "An exception is raised if *type* is not a heap type."
msgstr "*type*\\이 힙 형이 아니면 예외가 발생합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:114
msgid ""
"Return the module object associated with the given type when the type was"
" created using :c:func:`PyType_FromModuleAndSpec`."
msgstr ""

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:117
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:135
msgid ""
"If no module is associated with the given type, sets "
":py:class:`TypeError` and returns ``NULL``."
msgstr ""

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:120
msgid ""
"This function is usually used to get the module in which a method is "
"defined. Note that in such a method, ``PyType_GetModule(Py_TYPE(self))`` "
"may not return the intended result. ``Py_TYPE(self)`` may be a *subclass*"
" of the intended class, and subclasses are not necessarily defined in the"
" same module as their superclass. See :c:type:`PyCMethod` to get the "
"class that defines the method."
msgstr ""

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:131
msgid ""
"Return the state of the module object associated with the given type. "
"This is a shortcut for calling :c:func:`PyModule_GetState()` on the "
"result of :c:func:`PyType_GetModule`."
msgstr ""

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:138
msgid ""
"If the *type* has an associated module but its state is ``NULL``, returns"
" ``NULL`` without setting an exception."
msgstr ""

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:145
msgid "Creating Heap-Allocated Types"
msgstr "힙에 할당된 형 만들기"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:147
msgid ""
"The following functions and structs are used to create :ref:`heap types "
"<heap-types>`."
msgstr "다음 함수와 구조체는 :ref:`힙 형 <heap-types>`\\을 만드는 데 사용됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:152
msgid ""
"Creates and returns a heap type object from the *spec* "
"(:const:`Py_TPFLAGS_HEAPTYPE`)."
msgstr "*spec*\\으로 힙 형 객체를 만들고 반환합니다 (:const:`Py_TPFLAGS_HEAPTYPE`)."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:155
msgid ""
"If *bases* is a tuple, the created heap type contains all types contained"
" in it as base types."
msgstr "*bases*\\가 튜플이면, 생성된 힙 형에는 그것에 포함된 모든 형이 베이스형으로 포함됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:158
msgid ""
"If *bases* is ``NULL``, the *Py_tp_base* slot is used instead. If that "
"also is ``NULL``, the new type derives from :class:`object`."
msgstr ""
"*bases*\\가 ``NULL``\\이면, *Py_tp_base* 슬롯이 대신 사용됩니다. 그 또한 ``NULL``\\이면, 새 "
"형은 :class:`object`\\에서 파생됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:161
msgid ""
"The *module* argument can be used to record the module in which the new "
"class is defined. It must be a module object or ``NULL``. If not "
"``NULL``, the module is associated with the new type and can later be "
"retreived with :c:func:`PyType_GetModule`. The associated module is not "
"inherited by subclasses; it must be specified for each class "
"individually."
msgstr ""

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:168
msgid "This function calls :c:func:`PyType_Ready` on the new type."
msgstr "이 함수는 새로운 형에 :c:func:`PyType_Ready`\\를 호출합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:174
#, fuzzy
msgid "Equivalent to ``PyType_FromModuleAndSpec(NULL, spec, bases)``."
msgstr "``PyType_FromSpecWithBases(spec, NULL)``\\와 동등합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:180
msgid "Equivalent to ``PyType_FromSpecWithBases(spec, NULL)``."
msgstr "``PyType_FromSpecWithBases(spec, NULL)``\\와 동등합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:184
msgid "Structure defining a type's behavior."
msgstr "형의 행동을 정의하는 구조체."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:188
msgid "Name of the type, used to set :c:member:`PyTypeObject.tp_name`."
msgstr "형의 이름, :c:member:`PyTypeObject.tp_name`\\을 설정하는 데 사용됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:193
msgid ""
"Size of the instance in bytes, used to set "
":c:member:`PyTypeObject.tp_basicsize` and "
":c:member:`PyTypeObject.tp_itemsize`."
msgstr ""
"인스턴스의 크기(바이트), :c:member:`PyTypeObject.tp_basicsize`\\와 "
":c:member:`PyTypeObject.tp_itemsize`\\를 설정하는 데 사용됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:199
msgid "Type flags, used to set :c:member:`PyTypeObject.tp_flags`."
msgstr "형 플래그, :c:member:`PyTypeObject.tp_flags`\\를 설정하는 데 사용됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:201
msgid ""
"If the ``Py_TPFLAGS_HEAPTYPE`` flag is not set, "
":c:func:`PyType_FromSpecWithBases` sets it automatically."
msgstr ""
"``Py_TPFLAGS_HEAPTYPE`` 플래그가 설정되어 있지 않으면, "
":c:func:`PyType_FromSpecWithBases` 가 자동으로 플래그를 설정합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:206
msgid ""
"Array of :c:type:`PyType_Slot` structures. Terminated by the special slot"
" value ``{0, NULL}``."
msgstr ":c:type:`PyType_Slot` 구조체의 배열. 특수 슬롯값 ``{0, NULL}``\\에 의해 종료됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:211
msgid ""
"Structure defining optional functionality of a type, containing a slot ID"
" and a value pointer."
msgstr "형의 선택적 기능을 정의하는 구조체, 슬롯 ID와 값 포인터를 포함합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:216
msgid "A slot ID."
msgstr "슬롯 ID."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:218
msgid ""
"Slot IDs are named like the field names of the structures "
":c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` and "
":c:type:`PyAsyncMethods` with an added ``Py_`` prefix. For example, use:"
msgstr ""
"슬롯 ID는 구조체 :c:type:`PyTypeObject`, :c:type:`PyNumberMethods`, "
":c:type:`PySequenceMethods`, :c:type:`PyMappingMethods` 및 "
":c:type:`PyAsyncMethods` 의 필드 이름에 ``Py_`` 접두사를 붙인 이름을 사용합니다. 예를 들어, :"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:224
msgid "``Py_tp_dealloc`` to set :c:member:`PyTypeObject.tp_dealloc`"
msgstr ":c:member:`PyTypeObject.tp_dealloc`\\을 설정하는 ``Py_tp_dealloc``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:225
msgid "``Py_nb_add`` to set :c:member:`PyNumberMethods.nb_add`"
msgstr ":c:member:`PyNumberMethods.nb_add`\\를 설정하는 ``Py_nb_add``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:226
msgid "``Py_sq_length`` to set :c:member:`PySequenceMethods.sq_length`"
msgstr ":c:member:`PySequenceMethods.sq_length`\\를 설정하는 ``Py_sq_length``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:228
#, fuzzy
msgid ""
"The following fields cannot be set at all using :c:type:`PyType_Spec` and"
" :c:type:`PyType_Slot`:"
msgstr "다음 필드는 :c:type:`PyType_Spec`\\과 :c:type:`PyType_Slot`\\을 사용하여 설정할 수 없습니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:231
msgid ":c:member:`~PyTypeObject.tp_dict`"
msgstr ":c:member:`~PyTypeObject.tp_dict`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:232
msgid ":c:member:`~PyTypeObject.tp_mro`"
msgstr ":c:member:`~PyTypeObject.tp_mro`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:233
msgid ":c:member:`~PyTypeObject.tp_cache`"
msgstr ":c:member:`~PyTypeObject.tp_cache`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:234
msgid ":c:member:`~PyTypeObject.tp_subclasses`"
msgstr ":c:member:`~PyTypeObject.tp_subclasses`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:235
msgid ":c:member:`~PyTypeObject.tp_weaklist`"
msgstr ":c:member:`~PyTypeObject.tp_weaklist`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:236
#, fuzzy
msgid ":c:member:`~PyTypeObject.tp_vectorcall`"
msgstr ":c:member:`~PyTypeObject.tp_dict`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:237
#, fuzzy
msgid ""
":c:member:`~PyTypeObject.tp_weaklistoffset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ":c:member:`~PyTypeObject.tp_weaklistoffset`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:239
msgid ""
":c:member:`~PyTypeObject.tp_dictoffset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:241
msgid ""
":c:member:`~PyTypeObject.tp_vectorcall_offset` (see :ref:`PyMemberDef "
"<pymemberdef-offsets>`)"
msgstr ""

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:244
#, fuzzy
msgid ""
"The following fields cannot be set using :c:type:`PyType_Spec` and "
":c:type:`PyType_Slot` under the limited API:"
msgstr "다음 필드는 :c:type:`PyType_Spec`\\과 :c:type:`PyType_Slot`\\을 사용하여 설정할 수 없습니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:247
msgid ":c:member:`~PyBufferProcs.bf_getbuffer`"
msgstr ":c:member:`~PyBufferProcs.bf_getbuffer`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:248
msgid ":c:member:`~PyBufferProcs.bf_releasebuffer`"
msgstr ":c:member:`~PyBufferProcs.bf_releasebuffer`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:250
msgid ""
"Setting :c:data:`Py_tp_bases` may be problematic on some platforms. To "
"avoid issues, use the *bases* argument of "
":py:func:`PyType_FromSpecWithBases` instead."
msgstr ""
"일부 플랫폼에서는 :c:data:`Py_tp_bases`\\를 설정하는 것이 문제가 될 수 있습니다. 문제를 피하려면, 대신 "
":py:func:`PyType_FromSpecWithBases` 의 *bases* 인자를 사용하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:256
msgid "Slots in :c:type:`PyBufferProcs` in may be set in the unlimited API."
msgstr ""

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:260
msgid ""
"The desired value of the slot. In most cases, this is a pointer to a "
"function."
msgstr "슬롯의 원하는 값입니다. 대부분 이것은 함수에 대한 포인터입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/c-api/type.rst:263
msgid "May not be ``NULL``."
msgstr "``NULL``\\이 아닐 수 있습니다."

#~ msgid ":c:member:`~PyTypeObject.tp_print`"
#~ msgstr ":c:member:`~PyTypeObject.tp_print`"

#~ msgid ":c:member:`~PyTypeObject.tp_dictoffset`"
#~ msgstr ":c:member:`~PyTypeObject.tp_dictoffset`"

