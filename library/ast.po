# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-12 08:36+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../Doc/library/ast.rst:2
msgid ":mod:`ast` --- Abstract Syntax Trees"
msgstr ":mod:`ast` --- 추상 구문 트리"

#: ../Doc/library/ast.rst:14
msgid "**Source code:** :source:`Lib/ast.py`"
msgstr "**소스 코드:** :source:`Lib/ast.py`"

#: ../Doc/library/ast.rst:18
msgid ""
"The :mod:`ast` module helps Python applications to process trees of the "
"Python abstract syntax grammar.  The abstract syntax itself might change "
"with each Python release; this module helps to find out programmatically "
"what the current grammar looks like."
msgstr ""
":mod:`ast` 모듈은 파이썬 응용 프로그램이 파이썬 추상 구문 문법의 트리를 처리하는 데 도움을 줍니다. 추상 구문 자체는 각"
" 파이썬 릴리스마다 바뀔 수 있습니다; 이 모듈은 프로그래밍 방식으로 현재 문법의 모양을 찾는 데 도움이 됩니다."

#: ../Doc/library/ast.rst:23
msgid ""
"An abstract syntax tree can be generated by passing "
":data:`ast.PyCF_ONLY_AST` as a flag to the :func:`compile` built-in "
"function, or using the :func:`parse` helper provided in this module.  The"
" result will be a tree of objects whose classes all inherit from "
":class:`ast.AST`.  An abstract syntax tree can be compiled into a Python "
"code object using the built-in :func:`compile` function."
msgstr ""
":data:`ast.PyCF_ONLY_AST`\\를 플래그로 :func:`compile` 내장 함수에 전달하거나, 이 모듈에서 "
"제공된 :func:`parse` 도우미를 사용하여 추상 구문 트리를 생성할 수 있습니다. 결과는 클래스가 모두 "
":class:`ast.AST`\\에서 상속되는 객체들의 트리가 됩니다. 내장 :func:`compile` 함수를 사용하여 추상 구문"
" 트리를 파이썬 코드 객체로 컴파일할 수 있습니다."

#: ../Doc/library/ast.rst:33
msgid "Abstract Grammar"
msgstr "추상 문법"

#: ../Doc/library/ast.rst:35
msgid "The abstract grammar is currently defined as follows:"
msgstr "추상 문법은 현재 다음과 같이 정의됩니다:"

#: ../Doc/library/ast.rst:42
msgid "Node classes"
msgstr "노드 클래스"

#: ../Doc/library/ast.rst:46
msgid ""
"This is the base of all AST node classes.  The actual node classes are "
"derived from the :file:`Parser/Python.asdl` file, which is reproduced "
":ref:`below <abstract-grammar>`.  They are defined in the :mod:`_ast` C "
"module and re-exported in :mod:`ast`."
msgstr ""
"이것은 모든 AST 노드 클래스의 베이스입니다. 실제 노드 클래스는 :file:`Parser/Python.asdl` 파일에서 "
"파생되며, 이 파일의 내용은 :ref:`아래 <abstract-grammar>`\\에서 볼 수 있습니다. :mod:`_ast` C "
"모듈에 정의되어 있으며 :mod:`ast`\\로 다시 내보내 집니다."

#: ../Doc/library/ast.rst:51
msgid ""
"There is one class defined for each left-hand side symbol in the abstract"
" grammar (for example, :class:`ast.stmt` or :class:`ast.expr`).  In "
"addition, there is one class defined for each constructor on the right-"
"hand side; these classes inherit from the classes for the left-hand side "
"trees.  For example, :class:`ast.BinOp` inherits from :class:`ast.expr`."
"  For production rules with alternatives (aka \"sums\"), the left-hand "
"side class is abstract: only instances of specific constructor nodes are "
"ever created."
msgstr ""
"추상 문법의 각 좌변 심볼마다 하나의 클래스가 정의되어 있습니다 (예를 들어, :class:`ast.stmt`\\나 "
":class:`ast.expr`). 또한, 우변의 생성자마다 하나의 클래스가 정의되어 있습니다; 이 클래스는 좌변 트리의 클래스에서"
" 상속됩니다. 예를 들어, :class:`ast.BinOp`\\는 :class:`ast.expr`\\에서 상속됩니다. 대안을 갖는 "
"생성 규칙(일명 \"합\")의 경우, 좌변 클래스는 추상입니다: 특정 생성자 노드의 인스턴스만 만들어집니다."

#: ../Doc/library/ast.rst:64
msgid ""
"Each concrete class has an attribute :attr:`_fields` which gives the "
"names of all child nodes."
msgstr "각 구상 클래스에는 모든 자식 노드의 이름을 제공하는 어트리뷰트 :attr:`_fields`\\가 있습니다."

#: ../Doc/library/ast.rst:67
msgid ""
"Each instance of a concrete class has one attribute for each child node, "
"of the type as defined in the grammar.  For example, :class:`ast.BinOp` "
"instances have an attribute :attr:`left` of type :class:`ast.expr`."
msgstr ""
"구상 클래스의 각 인스턴스에는 각 자식 노드마다 문법에 정의된 형의 어트리뷰트가 하나씩 있습니다. 예를 들어, "
":class:`ast.BinOp` 인스턴스는 :class:`ast.expr` 형의 어트리뷰트 :attr:`left`\\를 갖습니다."

#: ../Doc/library/ast.rst:71
msgid ""
"If these attributes are marked as optional in the grammar (using a "
"question mark), the value might be ``None``.  If the attributes can have "
"zero-or-more values (marked with an asterisk), the values are represented"
" as Python lists.  All possible attributes must be present and have valid"
" values when compiling an AST with :func:`compile`."
msgstr ""
"문법에서 이러한 어트리뷰트가 선택적으로 표시되면 (물음표를 사용해서), 값은 ``None``\\일 수 있습니다. 어트리뷰트가 0개 "
"이상의 값을 가질 수 있으면 (애스터리스크로 표시됩니다), 값은 파이썬 리스트로 표현됩니다. :func:`compile`\\로 "
"AST를 컴파일할 때 가능한 모든 어트리뷰트가 존재하고 유효한 값을 가져야 합니다."

#: ../Doc/library/ast.rst:82
msgid ""
"Instances of :class:`ast.expr` and :class:`ast.stmt` subclasses have "
":attr:`lineno`, :attr:`col_offset`, :attr:`lineno`, and "
":attr:`col_offset` attributes.  The :attr:`lineno` and :attr:`end_lineno`"
" are the first and last line numbers of source text span (1-indexed so "
"the first line is line 1) and the :attr:`col_offset` and "
":attr:`end_col_offset` are the corresponding UTF-8 byte offsets of the "
"first and last tokens that generated the node. The UTF-8 offset is "
"recorded because the parser uses UTF-8 internally."
msgstr ""
":class:`ast.expr`\\과 :class:`ast.stmt` 서브 클래스의 인스턴스에는 :attr:`lineno`, "
":attr:`col_offset`, :attr:`lineno` 및 :attr:`col_offset` 어트리뷰트가 있습니다. "
":attr:`lineno`\\와 :attr:`end_lineno`\\는 소스 텍스트 스팬의 첫 번째와 마지막 줄 "
"번호(1-인덱싱이라서 첫 번째 줄은 줄 1입니다)이고 :attr:`col_offset`\\과 "
":attr:`end_col_offset`\\은 노드를 생성한 첫 번째와 마지막 토큰의 해당 UTF-8 바이트 오프셋입니다. 구문 "
"분석기가 UTF-8을 내부적으로 사용하기 때문에 UTF-8 오프셋이 기록됩니다."

#: ../Doc/library/ast.rst:90
msgid ""
"Note that the end positions are not required by the compiler and are "
"therefore optional. The end offset is *after* the last symbol, for "
"example one can get the source segment of a one-line expression node "
"using ``source_line[node.col_offset : node.end_col_offset]``."
msgstr ""
"종료 위치는 컴파일러에 필요하지 않아서 선택 사항입니다. 종료 오프셋은 마지막 심볼 *뒤*\\입니다. 예를 들어 "
"``source_line[node.col_offset : node.end_col_offset]``\\를 사용하여 한 줄 표현식 "
"노드의 소스 세그먼트를 가져올 수 있습니다."

#: ../Doc/library/ast.rst:95
msgid "The constructor of a class :class:`ast.T` parses its arguments as follows:"
msgstr ":class:`ast.T` 클래스의 생성자는 다음과 같이 인자를 구문 분석합니다:"

#: ../Doc/library/ast.rst:97
msgid ""
"If there are positional arguments, there must be as many as there are "
"items in :attr:`T._fields`; they will be assigned as attributes of these "
"names."
msgstr ""
"위치 인자가 있으면, :attr:`T._fields`\\에 있는 항목 수만큼 있어야 합니다; 이러한 이름의 어트리뷰트로 대입될 "
"것입니다."

#: ../Doc/library/ast.rst:99
msgid ""
"If there are keyword arguments, they will set the attributes of the same "
"names to the given values."
msgstr "키워드 인자가 있으면, 같은 이름의 어트리뷰트를 지정된 값으로 설정합니다."

#: ../Doc/library/ast.rst:102
msgid ""
"For example, to create and populate an :class:`ast.UnaryOp` node, you "
"could use ::"
msgstr "예를 들어, :class:`ast.UnaryOp` 노드를 만들고 채우려면, 다음과 같이 할 수 있습니다 ::"

#: ../Doc/library/ast.rst:114
msgid "or the more compact ::"
msgstr "또는 더 간결하게 ::"

#: ../Doc/library/ast.rst:121
msgid "Class :class:`ast.Constant` is now used for all constants."
msgstr ":class:`ast.Constant` 클래스는 이제 모든 상수에 사용됩니다."

#: ../Doc/library/ast.rst:125
msgid ""
"Simple indices are represented by their value, extended slices are "
"represented as tuples."
msgstr "단순 인덱스는 값으로 표현되고, 확장 슬라이스는 튜플로 표현됩니다."

#: ../Doc/library/ast.rst:130
msgid ""
"Old classes :class:`ast.Num`, :class:`ast.Str`, :class:`ast.Bytes`, "
":class:`ast.NameConstant` and :class:`ast.Ellipsis` are still available, "
"but they will be removed in future Python releases.  In the meantime, "
"instantiating them will return an instance of a different class."
msgstr ""
"이전 클래스 :class:`ast.Num`, :class:`ast.Str`, :class:`ast.Bytes`, "
":class:`ast.NameConstant` 및 :class:`ast.Ellipsis`\\는 여전히 사용할 수 있지만, 향후 "
"파이썬 릴리스에서 제거될 예정입니다. 그동안, 이들을 인스턴스 화하면 다른 클래스의 인스턴스가 반환됩니다."

#: ../Doc/library/ast.rst:137
msgid ""
"Old classes :class:`ast.Index` and :class:`ast.ExtSlice` are still "
"available, but they will be removed in future Python releases. In the "
"meantime, instantiating them will return an instance of a different "
"class."
msgstr ""
"이전 클래스 :class:`ast.Index`\\와 :class:`ast.ExtSlice`\\는 여전히 사용할 수 있지만, 향후 "
"파이썬 릴리스에서 제거될 예정입니다. 그동안, 이들을 인스턴스 화하면 다른 클래스의 인스턴스가 반환됩니다."

#: ../Doc/library/ast.rst:144
msgid "Literals"
msgstr "리터럴"

#: ../Doc/library/ast.rst:148
msgid ""
"A constant value. The ``value`` attribute of the ``Constant`` literal "
"contains the Python object it represents. The values represented can be "
"simple types such as a number, string or ``None``, but also immutable "
"container types (tuples and frozensets) if all of their elements are "
"constant."
msgstr ""
"상숫값. ``Constant`` 리터럴의 ``value`` 어트리뷰트는 그것이 나타내는 파이썬 객체를 포함합니다. 표현되는 값은 "
"숫자, 문자열 또는 ``None``\\과 같은 간단한 형일 수 있지만, 모든 요소가 상수라면 불변 컨테이너 형(튜플과 "
"frozenset)일 수도 있습니다."

#: ../Doc/library/ast.rst:162
msgid ""
"Node representing a single formatting field in an f-string. If the string"
" contains a single formatting field and nothing else the node can be "
"isolated otherwise it appears in :class:`JoinedStr`."
msgstr ""
"f-문자열에서 단일 포매팅 필드를 나타내는 노드. 문자열에 단일 포매팅 필드가 포함되어 있고 다른 것이 없으면 노드를 분리 할 수 "
"있습니다, 그렇지 않으면 :class:`JoinedStr`\\에 나타납니다."

#: ../Doc/library/ast.rst:166
msgid ""
"``value`` is any expression node (such as a literal, a variable, or a "
"function call)."
msgstr "``value``\\는 모든 표현식 노드(가령 리터럴, 변수 또는 함수 호출)입니다."

#: ../Doc/library/ast.rst:168
msgid "``conversion`` is an integer:"
msgstr "``conversion``\\은 정수입니다:"

#: ../Doc/library/ast.rst:170
msgid "-1: no formatting"
msgstr "-1: 포매팅 없음"

#: ../Doc/library/ast.rst:171
msgid "115: ``!s`` string formatting"
msgstr "115: ``!s`` 문자열 포매팅"

#: ../Doc/library/ast.rst:172
msgid "114: ``!r`` repr formatting"
msgstr "114: ``!r`` repr 포매팅"

#: ../Doc/library/ast.rst:173
msgid "97: ``!a`` ascii formatting"
msgstr "97: ``!a`` ascii 포매팅"

#: ../Doc/library/ast.rst:175
msgid ""
"``format_spec`` is a :class:`JoinedStr` node representing the formatting "
"of the value, or ``None`` if no format was specified. Both ``conversion``"
" and ``format_spec`` can be set at the same time."
msgstr ""
"``format_spec``\\은 값의 포매팅을 나타내는 :class:`JoinedStr` 노드이거나, 표맷이 지정되지 않았으면 "
"``None``\\입니다. ``conversion``\\과 ``format_spec``\\을 동시에 설정할 수 있습니다."

#: ../Doc/library/ast.rst:182
msgid ""
"An f-string, comprising a series of :class:`FormattedValue` and "
":class:`Constant` nodes."
msgstr "일련의 :class:`FormattedValue`\\와 :class:`Constant` 노드로 구성된 f-문자열."

#: ../Doc/library/ast.rst:211
msgid ""
"A list or tuple. ``elts`` holds a list of nodes representing the "
"elements. ``ctx`` is :class:`Store` if the container is an assignment "
"target (i.e. ``(x,y)=something``), and :class:`Load` otherwise."
msgstr ""
"리스트나 튜플. ``elts``\\는 요소를 나타내는 노드의 리스트를 보유합니다. ``ctx``\\는 컨테이너가 대입 대상이면 "
"(가령 ``(x,y)=something``) :class:`Store`\\이고, 그렇지 않으면 :class:`Load`\\입니다."

#: ../Doc/library/ast.rst:237
msgid "A set. ``elts`` holds a list of nodes representing the set's elements."
msgstr "집합. ``elts``\\는 집합의 요소를 나타내는 노드의 리스트를 보유합니다."

#: ../Doc/library/ast.rst:252
msgid ""
"A dictionary. ``keys`` and ``values`` hold lists of nodes representing "
"the keys and the values respectively, in matching order (what would be "
"returned when calling :code:`dictionary.keys()` and "
":code:`dictionary.values()`)."
msgstr ""
"딕셔너리. ``keys``\\와 ``values``\\는 각각 키와 값을 나타내는 노드의 리스트를 일치하는 순서대로 "
"(:code:`dictionary.keys()`\\와 :code:`dictionary.values()`\\를 호출할 때 반환되는 "
"순서) 보유합니다."

#: ../Doc/library/ast.rst:256
msgid ""
"When doing dictionary unpacking using dictionary literals the expression "
"to be expanded goes in the ``values`` list, with a ``None`` at the "
"corresponding position in ``keys``."
msgstr ""
"딕셔너리 리터럴을 사용하여 딕셔너리 언 패킹을 수행할 때 확장될 표현식은 ``values`` 리스트로 가고, ``keys``\\의 "
"해당 위치에는 ``None``\\이 갑니다."

#: ../Doc/library/ast.rst:274
msgid "Variables"
msgstr "변수"

#: ../Doc/library/ast.rst:278
msgid ""
"A variable name. ``id`` holds the name as a string, and ``ctx`` is one of"
" the following types."
msgstr "변수 이름. ``id``\\는 이름을 문자열로 보유하며, ``ctx``\\는 다음 형 중 하나입니다."

#: ../Doc/library/ast.rst:286
msgid ""
"Variable references can be used to load the value of a variable, to "
"assign a new value to it, or to delete it. Variable references are given "
"a context to distinguish these cases."
msgstr ""
"변수 참조는 변숫값을 로드하거나, 그것에 새 값을 대입하거나, 그것을 삭제하는데 사용될 수 있습니다. 변수 참조에는 이러한 경우를 "
"구별하기 위한 컨텍스트가 제공됩니다."

#: ../Doc/library/ast.rst:319
msgid ""
"A ``*var`` variable reference. ``value`` holds the variable, typically a "
":class:`Name` node. This type must be used when building a :class:`Call` "
"node with ``*args``."
msgstr ""
"``*var`` 변수 참조. ``value``\\는 변수(일반적으로 :class:`Name` 노드)를 보유합니다. 이 형은 "
"``*args``\\로 :class:`Call` 노드를 빌드할 때 사용해야 합니다."

#: ../Doc/library/ast.rst:342
msgid "Expressions"
msgstr "표현식"

#: ../Doc/library/ast.rst:346
msgid ""
"When an expression, such as a function call, appears as a statement by "
"itself with its return value not used or stored, it is wrapped in this "
"container. ``value`` holds one of the other nodes in this section, a "
":class:`Constant`, a :class:`Name`, a :class:`Lambda`, a :class:`Yield` "
"or :class:`YieldFrom` node."
msgstr ""
"표현식(가령 함수 호출)이 반환 값이 사용되거나 저장되지 않은 자신만의 문장으로 나타나면, 이 컨테이너에 래핑 됩니다. "
"``value``\\는 이 섹션의 다른 노드인 :class:`Constant`, :class:`Name`, "
":class:`Lambda`, :class:`Yield` 또는 :class:`YieldFrom` 노드 중 하나를 보유합니다."

#: ../Doc/library/ast.rst:365
msgid ""
"A unary operation. ``op`` is the operator, and ``operand`` any expression"
" node."
msgstr "단항 연산. ``op``\\는 연산자이고, ``operand``\\는 임의의 표현식 노드입니다."

#: ../Doc/library/ast.rst:374
msgid ""
"Unary operator tokens. :class:`Not` is the ``not`` keyword, "
":class:`Invert` is the ``~`` operator."
msgstr "단항 연산자 토큰. :class:`Not`\\은 ``not`` 키워드이고, :class:`Invert`\\는 ``~`` 연산자입니다."

#: ../Doc/library/ast.rst:388
msgid ""
"A binary operation (like addition or division). ``op`` is the operator, "
"and ``left`` and ``right`` are any expression nodes."
msgstr ""
"이항 연산 (더하기나 나누기 같은). ``op``\\는 연산자이고, ``left``\\와 ``right``\\는 임의의 표현식 "
"노드입니다."

#: ../Doc/library/ast.rst:415
msgid "Binary operator tokens."
msgstr "이항 연산자 토큰."

#: ../Doc/library/ast.rst:420
msgid ""
"A boolean operation, 'or' or 'and'. ``op`` is :class:`Or` or "
":class:`And`. ``values`` are the values involved. Consecutive operations "
"with the same operator, such as ``a or b or c``, are collapsed into one "
"node with several values."
msgstr ""
"불리언 연산, 'or' 나 'and'. ``op``\\는 :class:`Or`\\나 :class:`And`\\입니다. "
"``values``\\는 관련된 값입니다. 같은 연산자를 사용하는 연속 연산(가령 ``a or b or c``)은 여러 값을 가진 "
"하나의 노드로 축소됩니다."

#: ../Doc/library/ast.rst:425
msgid "This doesn't include ``not``, which is a :class:`UnaryOp`."
msgstr "여기에는 :class:`UnaryOp`\\인 ``not``\\이 포함되지 않습니다."

#: ../Doc/library/ast.rst:441
msgid "Boolean operator tokens."
msgstr "불리언 연산자 토큰."

#: ../Doc/library/ast.rst:446
msgid ""
"A comparison of two or more values. ``left`` is the first value in the "
"comparison, ``ops`` the list of operators, and ``comparators`` the list "
"of values after the first element in the comparison."
msgstr ""
"둘 이상의 값의 비교. ``left``\\는 비교의 첫 번째 값이고, ``ops``\\는 연산자의 리스트이며, "
"``comparators``\\는 비교의 첫 번째 요소 다음의 값 리스트입니다."

#: ../Doc/library/ast.rst:475
msgid "Comparison operator tokens."
msgstr "비교 연산자 토큰."

#: ../Doc/library/ast.rst:480
msgid ""
"A function call. ``func`` is the function, which will often be a "
":class:`Name` or :class:`Attribute` object. Of the arguments:"
msgstr ""
"함수 호출. ``func``\\는 함수이며, 종종 :class:`Name`\\이나 :class:`Attribute` 객체입니다. "
"인자 중:"

#: ../Doc/library/ast.rst:483
msgid "``args`` holds a list of the arguments passed by position."
msgstr "``args``\\는 위치로 전달된 인자의 리스트를 보유합니다."

#: ../Doc/library/ast.rst:484
msgid ""
"``keywords`` holds a list of :class:`keyword` objects representing "
"arguments passed by keyword."
msgstr "``keywords``\\는 키워드로 전달된 인자를 나타내는 :class:`keyword` 객체의 리스트를 보유합니다."

#: ../Doc/library/ast.rst:487
msgid ""
"When creating a ``Call`` node, ``args`` and ``keywords`` are required, "
"but they can be empty lists. ``starargs`` and ``kwargs`` are optional."
msgstr ""
"``Call`` 노드를 만들 때, ``args``\\와 ``keywords``\\는 필수이지만, 비어있는 리스트일 수 있습니다. "
"``starargs``\\와 ``kwargs``\\는 선택적입니다."

#: ../Doc/library/ast.rst:511
msgid ""
"A keyword argument to a function call or class definition. ``arg`` is a "
"raw string of the parameter name, ``value`` is a node to pass in."
msgstr ""
"함수 호출이나 클래스 정의에 대한 키워드 인자. ``arg``\\는 매개 변수 이름의 원시 문자열이고, ``value``\\는 "
"전달할 노드입니다."

#: ../Doc/library/ast.rst:517
msgid ""
"An expression such as ``a if b else c``. Each field holds a single node, "
"so in the following example, all three are :class:`Name` nodes."
msgstr ""
"``a if b else c``\\와 같은 표현식. 각 필드는 단일 노드를 보유해서, 다음 예에서, 세 개 모두 "
":class:`Name` 노드입니다."

#: ../Doc/library/ast.rst:532
msgid ""
"Attribute access, e.g. ``d.keys``. ``value`` is a node, typically a "
":class:`Name`. ``attr`` is a bare string giving the name of the "
"attribute, and ``ctx`` is :class:`Load`, :class:`Store` or :class:`Del` "
"according to how the attribute is acted on."
msgstr ""
"어트리뷰트 액세스, 예를 들어 ``d.keys``. ``value``\\는 노드(보통 :class:`Name`)입니다. "
"``attr``\\은 어트리뷰트의 이름을 제공하는 문자열이며, ``ctx``\\는 어트리뷰트에 적용되는 방식에 따라 "
":class:`Load`, :class:`Store` 또는 :class:`Del`\\입니다."

#: ../Doc/library/ast.rst:549
msgid ""
"A named expression. This AST node is produced by the assignment "
"expressions operator (also known as the walrus operator). As opposed to "
"the :class:`Assign` node in which the first argument can be multiple "
"nodes, in this case both ``target`` and ``value`` must be single nodes."
msgstr ""
"명명된 표현식. 이 AST 노드는 대입 표현식 연산자(바다코끼리(walrus) 연산자라고도 합니다)에 의해 생성됩니다. 첫 번째 "
"인자가 여러 노드일 수 있는 :class:`Assign` 노드와 달리, 이 경우에는 ``target``\\과 ``value``\\는"
" 모두 단일 노드여야 합니다."

#: ../Doc/library/ast.rst:564
msgid "Subscripting"
msgstr "서브스크립팅"

#: ../Doc/library/ast.rst:568
msgid ""
"A subscript, such as ``l[1]``. ``value`` is the subscripted object "
"(usually sequence or mapping). ``slice`` is an index, slice or key. It "
"can be a :class:`Tuple` and contain a :class:`Slice`. ``ctx`` is "
":class:`Load`, :class:`Store` or :class:`Del` according to the action "
"performed with the subscript."
msgstr ""
"서브스크립트, 가령 ``l[1]``. ``value``\\는 서브스크립트되는 객체입니다 (보통 시퀀스나 매핑). "
"``slice``\\는 인덱스, 슬라이스 또는 키입니다. :class:`Tuple`\\일 수 있으며 :class:`Slice`\\를"
" 포함합니다. ``ctx``\\는 서브스크립트로 수행되는 동작에 따라 :class:`Load`, :class:`Store` 또는 "
":class:`Del`\\입니다."

#: ../Doc/library/ast.rst:592
msgid ""
"Regular slicing (on the form ``lower:upper`` or ``lower:upper:step``). "
"Can occur only inside the *slice* field of :class:`Subscript`, either "
"directly or as an element of :class:`Tuple`."
msgstr ""
"일반 슬라이싱 (``lower:upper``\\나 ``lower:upper:step`` 형식). "
":class:`Subscript`\\의 *slice* 필드 내에서만 직접 또는 :class:`Tuple`\\의 요소로 등장할 수 "
"있습니다."

#: ../Doc/library/ast.rst:609
msgid "Comprehensions"
msgstr "컴프리헨션"

#: ../Doc/library/ast.rst:616
msgid ""
"List and set comprehensions, generator expressions, and dictionary "
"comprehensions. ``elt`` (or ``key`` and ``value``) is a single node "
"representing the part that will be evaluated for each item."
msgstr ""
"리스트와 집합 컴프리헨션, 제너레이터 표현식 및 딕셔너리 컴프리헨션. ``elt``\\(또는 ``key``\\와 "
"``value``)는 항목마다 평가될 부분을 나타내는 단일 노드입니다."

#: ../Doc/library/ast.rst:620
msgid "``generators`` is a list of :class:`comprehension` nodes."
msgstr "``generators``\\는 :class:`comprehension` 노드의 리스트입니다."

#: ../Doc/library/ast.rst:662
msgid ""
"One ``for`` clause in a comprehension. ``target`` is the reference to use"
" for each element - typically a :class:`Name` or :class:`Tuple` node. "
"``iter`` is the object to iterate over. ``ifs`` is a list of test "
"expressions: each ``for`` clause can have multiple ``ifs``."
msgstr ""
"컴프리헨션에서 하나의 ``for`` 절. ``target``\\은 각 요소(보통 :class:`Name`\\이나 "
":class:`Tuple` 노드)에 사용할 참조입니다. ``iter``\\는 이터레이트 할 객체입니다. ``ifs``\\는 테스트 "
"표현식의 리스트입니다: 각 ``for`` 절은 여러 ``ifs``\\를 가질 수 있습니다."

#: ../Doc/library/ast.rst:667
msgid ""
"``is_async`` indicates a comprehension is asynchronous (using an ``async "
"for`` instead of ``for``). The value is an integer (0 or 1)."
msgstr ""
"``is_async``\\는 컴프리헨션이 비동기임을 나타냅니다 (``for`` 대신 ``async for``\\를 사용합니다). "
"값은 정수(0이나 1)입니다."

#: ../Doc/library/ast.rst:733
msgid "Statements"
msgstr "문장"

#: ../Doc/library/ast.rst:737
msgid ""
"An assignment. ``targets`` is a list of nodes, and ``value`` is a single "
"node."
msgstr "대입. ``targets``\\는 노드의 리스트이고, ``value``\\는 단일 노드입니다."

#: ../Doc/library/ast.rst:739
msgid ""
"Multiple nodes in ``targets`` represents assigning the same value to "
"each. Unpacking is represented by putting a :class:`Tuple` or "
":class:`List` within ``targets``."
msgstr ""
"``targets``\\의 여러 노드는 각각 같은 값을 할당하는 것을 나타냅니다. 언 패킹은 ``targets`` 내에 "
":class:`Tuple`\\이나 :class:`List`\\를 넣어 표현됩니다."

#: ../Doc/library/ast.rst:745 ../Doc/library/ast.rst:1032
#: ../Doc/library/ast.rst:1205 ../Doc/library/ast.rst:1258
msgid ""
"``type_comment`` is an optional string with the type annotation as a "
"comment."
msgstr "``type_comment``\\는 형 어노테이션이 주석으로 포함된 선택적 문자열입니다."

#: ../Doc/library/ast.rst:775
msgid ""
"An assignment with a type annotation. ``target`` is a single node and can"
" be a :class:`Name`, a :class:`Attribute` or a :class:`Subscript`. "
"``annotation`` is the annotation, such as a :class:`Constant` or "
":class:`Name` node. ``value`` is a single optional node. ``simple`` is a "
"boolean integer set to True for a :class:`Name` node in ``target`` that "
"do not appear in between parenthesis and are hence pure names and not "
"expressions."
msgstr ""
"형 주석이 있는 대입. ``target``\\은 단일 노드이며 :class:`Name`, :class:`Attribute` 또는 "
":class:`Subscript`\\일 수 있습니다. ``annotation``\\은 :class:`Constant`\\나 "
":class:`Name` 노드와 같은 어노테이션입니다. ``value``\\는 단일 선택적 노드입니다. ``simple``\\은 "
"괄호 사이에 나타나지 않은 순수한 이름이며 표현식이 아닌 ``target``\\의 :class:`Name` 노드에 대해 True로 "
"설정된 불리언 정수입니다."

#: ../Doc/library/ast.rst:830
msgid ""
"Augmented assignment, such as ``a += 1``. In the following example, "
"``target`` is a :class:`Name` node for ``x`` (with the :class:`Store` "
"context), ``op`` is :class:`Add`, and ``value`` is a :class:`Constant` "
"with value for 1."
msgstr ""
"증분 대입, 가령 ``a += 1``. 다음 예에서, ``target``\\은 ``x``\\(:class:`Store` "
"컨텍스트로)를 위한 :class:`Name` 노드이고, ``op``\\는 :class:`Add`\\이며, ``value``\\는 "
"값이 1인 :class:`Constant`\\입니다."

#: ../Doc/library/ast.rst:835
msgid ""
"The ``target`` attribute connot be of class :class:`Tuple` or "
":class:`List`, unlike the targets of :class:`Assign`."
msgstr ""
"``target`` 어트리뷰트는 :class:`Assign`\\의 대상과 달리 :class:`Tuple`\\이나 "
":class:`List` 클래스일 수 없습니다."

#: ../Doc/library/ast.rst:852
msgid ""
"A ``raise`` statement. ``exc`` is the exception object to be raised, "
"normally a :class:`Call` or :class:`Name`, or ``None`` for a standalone "
"``raise``. ``cause`` is the optional part for ``y`` in ``raise x from "
"y``."
msgstr ""
"``raise`` 문. ``exc``\\는 발생시킬 예외 객체로 일반적으로 :class:`Call`\\이나 "
":class:`Name`\\이거나, 독립 ``raise``\\의 경우 ``None``\\입니다. ``cause``\\는 "
"``raise x from y``\\에서 ``y``\\에 해당하는 선택적 부분입니다."

#: ../Doc/library/ast.rst:869
msgid ""
"An assertion. ``test`` holds the condition, such as a :class:`Compare` "
"node. ``msg`` holds the failure message."
msgstr ""
"어서션. ``test``\\는 (:class:`Compare` 노드와 같은) 조건을 보유합니다. ``msg``\\는 실패 메시지를 "
"보유합니다."

#: ../Doc/library/ast.rst:885
msgid ""
"Represents a ``del`` statement. ``targets`` is a list of nodes, such as "
":class:`Name`, :class:`Attribute` or :class:`Subscript` nodes."
msgstr ""
"``del`` 문을 나타냅니다. ``targets``\\는 :class:`Name`, :class:`Attribute` 또는 "
":class:`Subscript` 같은 노드들의 리스트입니다."

#: ../Doc/library/ast.rst:903
msgid "A ``pass`` statement."
msgstr "``pass`` 문."

#: ../Doc/library/ast.rst:914
msgid ""
"Other statements which are only applicable inside functions or loops are "
"described in other sections."
msgstr "함수나 루프 내부에만 적용할 수 있는 다른 문장들은 다른 섹션에 설명되어 있습니다."

#: ../Doc/library/ast.rst:918
msgid "Imports"
msgstr "임포트"

#: ../Doc/library/ast.rst:922
msgid "An import statement. ``names`` is a list of :class:`alias` nodes."
msgstr "import 문. ``names``\\는 :class:`alias` 노드의 리스트입니다."

#: ../Doc/library/ast.rst:939
msgid ""
"Represents ``from x import y``. ``module`` is a raw string of the 'from' "
"name, without any leading dots, or ``None`` for statements such as ``from"
" . import foo``. ``level`` is an integer holding the level of the "
"relative import (0 means absolute import)."
msgstr ""
"``from x import y``\\를 나타냅니다. ``module``\\은  선행 점이 없는 'from' 이름의 원시 "
"문자열이며, ``from . import foo``\\와 같은 문장의 경우 ``None``\\입니다. ``level``\\은 상대 "
"임포트 수준을 보유하는 정수입니다 (0은 절대 임포트를 의미합니다)."

#: ../Doc/library/ast.rst:961
msgid ""
"Both parameters are raw strings of the names. ``asname`` can be ``None`` "
"if the regular name is to be used."
msgstr "두 매개 변수 모두 이름의 원시 문자열입니다. 정규 이름을 사용하면 ``asname``\\은 ``None``\\이 될 수 있습니다."

#: ../Doc/library/ast.rst:978
msgid "Control flow"
msgstr "제어 흐름"

#: ../Doc/library/ast.rst:981
msgid ""
"Optional clauses such as ``else`` are stored as an empty list if they're "
"not present."
msgstr "``else``\\와 같은 선택적 절은 존재하지 않으면 빈 목록으로 저장됩니다."

#: ../Doc/library/ast.rst:986
msgid ""
"An ``if`` statement. ``test`` holds a single node, such as a "
":class:`Compare` node. ``body`` and ``orelse`` each hold a list of nodes."
msgstr ""
"``if`` 문. ``test``\\는 (:class:`Compare` 노드와 같은) 단일 노드를 보유합니다. ``body``\\와"
" ``orelse``\\는 각각 노드 리스트를 보유합니다."

#: ../Doc/library/ast.rst:989
msgid ""
"``elif`` clauses don't have a special representation in the AST, but "
"rather appear as extra :class:`If` nodes within the ``orelse`` section of"
" the previous one."
msgstr ""
"``elif`` 절은 AST에서 특별한 표현이 없지만, 앞의 ``orelse`` 섹션 안에서 추가 :class:`If` 노드로 "
"나타납니다."

#: ../Doc/library/ast.rst:1024
msgid ""
"A ``for`` loop. ``target`` holds the variable(s) the loop assigns to, as "
"a single :class:`Name`, :class:`Tuple` or :class:`List` node. ``iter`` "
"holds the item to be looped over, again as a single node. ``body`` and "
"``orelse`` contain lists of nodes to execute. Those in ``orelse`` are "
"executed if the loop finishes normally, rather than via a ``break`` "
"statement."
msgstr ""
"``for`` 루프 ``target``\\은 루프가 대입하는 변수를 단일 :class:`Name`, :class:`Tuple` 또는"
" :class:`List` 노드로 보유합니다. ``iter``\\는 루핑할 항목을 역시 단일 노드로 보유합니다. "
"``body``\\와 ``orelse``\\는 실행할 노드의 리스트를 포함합니다. 루프가 ``break`` 문을 통하지 않고 "
"정상적으로 완료되면 ``orelse``\\에 있는 노드가 실행됩니다."

#: ../Doc/library/ast.rst:1058
msgid ""
"A ``while`` loop. ``test`` holds the condition, such as a "
":class:`Compare` node."
msgstr "``while`` 루프. ``test``\\는 (:class:`Compare` 노드와 같은) 조건을 보유합니다."

#: ../Doc/library/ast.rst:1085
msgid "The ``break`` and ``continue`` statements."
msgstr "``break``\\와 ``continue`` 문."

#: ../Doc/library/ast.rst:1120
msgid ""
"``try`` blocks. All attributes are list of nodes to execute, except for "
"``handlers``, which is a list of :class:`ExceptHandler` nodes."
msgstr ""
"``try`` 블록. :class:`ExceptHandler` 노드의 리스트인 ``handlers``\\를 제외한, 모든 "
"어트리뷰트는 실행할 노드의 리스트입니다."

#: ../Doc/library/ast.rst:1166
msgid ""
"A single ``except`` clause. ``type`` is the exception type it will match,"
" typically a :class:`Name` node (or ``None`` for a catch-all ``except:`` "
"clause). ``name`` is a raw string for the name to hold the exception, or "
"``None`` if the clause doesn't have ``as foo``. ``body`` is a list of "
"nodes."
msgstr ""
"단일 ``except`` 절. ``type``\\은 일치할 예외 형이며, 일반적으로 :class:`Name` 노드(또는 모두 잡는 "
"``except:`` 절의 경우는 ``None``)입니다. ``name``\\은 예외를 담을 이름을 위한 원시 문자열이거나, 절에 "
"``as foo``\\가 없으면 ``None``\\입니다. ``body``\\는 노드의 리스트입니다."

#: ../Doc/library/ast.rst:1200
msgid ""
"A ``with`` block. ``items`` is a list of :class:`withitem` nodes "
"representing the context managers, and ``body`` is the indented block "
"inside the context."
msgstr ""
"``with`` 블록. ``items``\\는 컨텍스트 관리자를 나타내는 :class:`withitem` 노드의 리스트이며, "
"``body``\\는 컨텍스트 내에서 들여쓰기 된 블록입니다."

#: ../Doc/library/ast.rst:1210
msgid ""
"A single context manager in a ``with`` block. ``context_expr`` is the "
"context manager, often a :class:`Call` node. ``optional_vars`` is a "
":class:`Name`, :class:`Tuple` or :class:`List` for the ``as foo`` part, "
"or ``None`` if that isn't used."
msgstr ""
"``with`` 블록의 단일 컨텍스트 관리자. ``context_expr``\\은 컨텍스트 관리자이며, 종종 "
":class:`Call` 노드입니다. ``optional_vars``\\는 ``as foo`` 부분의 경우 "
":class:`Name`, :class:`Tuple` 또는 :class:`List`\\이거나, 사용하지 않으면 "
"``None``\\입니다."

#: ../Doc/library/ast.rst:1243
msgid "Function and class definitions"
msgstr "함수와 클래스 정의"

#: ../Doc/library/ast.rst:1247
msgid "A function definition."
msgstr "함수 정의."

#: ../Doc/library/ast.rst:1249
msgid "``name`` is a raw string of the function name."
msgstr "``name``\\은 함수 이름의 원시 문자열입니다."

#: ../Doc/library/ast.rst:1250
msgid "``args`` is a :class:`arguments` node."
msgstr "``args``\\는 :class:`arguments` 노드입니다."

#: ../Doc/library/ast.rst:1251
msgid "``body`` is the list of nodes inside the function."
msgstr "``body``\\는 함수 내부의 노드 리스트입니다."

#: ../Doc/library/ast.rst:1252
msgid ""
"``decorator_list`` is the list of decorators to be applied, stored "
"outermost first (i.e. the first in the list will be applied last)."
msgstr ""
"``decorator_list``\\는 적용할 데코레이터 리스트이며, 가장 바깥쪽에 먼저 저장됩니다 (즉, 리스트의 첫 번째가 "
"마지막에 적용됩니다)."

#: ../Doc/library/ast.rst:1254
msgid "``returns`` is the return annotation."
msgstr "``returns``\\는 반환 어노테이션입니다."

#: ../Doc/library/ast.rst:1263
msgid ""
"``lambda`` is a minimal function definition that can be used inside an "
"expression. Unlike :class:`FunctionDef`, ``body`` holds a single node."
msgstr ""
"``lambda``\\는 표현식 내에서 사용할 수 있는 최소 함수 정의입니다. :class:`FunctionDef`\\와 달리, "
"``body``\\는 단일 노드를 보유합니다."

#: ../Doc/library/ast.rst:1287
msgid "The arguments for a function."
msgstr "함수의 인자."

#: ../Doc/library/ast.rst:1289
msgid ""
"``posonlyargs``, ``args`` and ``kwonlyargs`` are lists of :class:`arg` "
"nodes."
msgstr "``posonlyargs``, ``args`` 및 ``kwonlyargs``\\는 :class:`arg` 노드의 리스트입니다."

#: ../Doc/library/ast.rst:1290
msgid ""
"``vararg`` and ``kwarg`` are single :class:`arg` nodes, referring to the "
"``*args, **kwargs`` parameters."
msgstr ""
"``vararg``\\와 ``kwarg``\\는 ``*args, **kwargs`` 매개 변수를 참조하는 단일 "
":class:`arg` 노드입니다."

#: ../Doc/library/ast.rst:1292
msgid ""
"``kw_defaults`` is a list of default values for keyword-only arguments. "
"If one is ``None``, the corresponding argument is required."
msgstr ""
"``kw_defaults``\\는 키워드 전용 인자의 기본값 리스트입니다. 어떤 것이 ``None``\\이면, 해당 인자는 "
"필수입니다."

#: ../Doc/library/ast.rst:1294
msgid ""
"``defaults`` is a list of default values for arguments that can be passed"
" positionally. If there are fewer defaults, they correspond to the last n"
" arguments."
msgstr ""
"``defaults``\\는 위치적으로 전달될 수 있는 인자의 기본값 리스트입니다. 기본값 수가 더 적으면, 마지막 n개의 인자에 "
"해당합니다."

#: ../Doc/library/ast.rst:1301
msgid ""
"A single argument in a list. ``arg`` is a raw string of the argument "
"name, ``annotation`` is its annotation, such as a :class:`Str` or "
":class:`Name` node."
msgstr ""
"리스트의 단일 인자. ``arg``\\는 인자 이름의 원시 문자열이고, ``annotation``\\은 "
":class:`Str`\\이나 :class:`Name` 노드와 같은 어노테이션입니다."

#: ../Doc/library/ast.rst:1307
msgid ""
"``type_comment`` is an optional string with the type annotation as a "
"comment"
msgstr "``type_comment``\\는 주석으로 제공된 형 어노테이션이 있는 선택적 문자열입니다."

#: ../Doc/library/ast.rst:1351
msgid "A ``return`` statement."
msgstr "``return`` 문."

#: ../Doc/library/ast.rst:1366
msgid ""
"A ``yield`` or ``yield from`` expression. Because these are expressions, "
"they must be wrapped in a :class:`Expr` node if the value sent back is "
"not used."
msgstr ""
"``yield``\\나 ``yield from`` 표현식. 이들은 표현식이라서, 반환된 값이 사용되지 않으면 "
":class:`Expr` 노드에 래핑 되어야 합니다."

#: ../Doc/library/ast.rst:1391
msgid ""
"``global`` and ``nonlocal`` statements. ``names`` is a list of raw "
"strings."
msgstr "``global``\\과 ``nonlocal`` 문. ``names``\\는 원시 문자열 리스트입니다."

#: ../Doc/library/ast.rst:1418
msgid "A class definition."
msgstr "클래스 정의."

#: ../Doc/library/ast.rst:1420
msgid "``name`` is a raw string for the class name"
msgstr "``name``\\은 클래스 이름의 원시 문자열입니다."

#: ../Doc/library/ast.rst:1421
msgid "``bases`` is a list of nodes for explicitly specified base classes."
msgstr "``bases``\\는 명시적으로 지정된 베이스 클래스의 노드 리스트입니다."

#: ../Doc/library/ast.rst:1422
msgid ""
"``keywords`` is a list of :class:`keyword` nodes, principally for "
"'metaclass'. Other keywords will be passed to the metaclass, as per "
"`PEP-3115 <http://www.python.org/dev/peps/pep-3115/>`_."
msgstr ""
"``keywords``\\는 :class:`keyword` 노드 리스트입니다, 주로 'metaclass'를 위한 것입니다. 다른 "
"키워드는 `PEP-3115 <http://www.python.org/dev/peps/pep-3115/>`_\\에 따라 메타 클래스로"
" 전달됩니다."

#: ../Doc/library/ast.rst:1425
msgid ""
"``starargs`` and ``kwargs`` are each a single node, as in a function "
"call. starargs will be expanded to join the list of base classes, and "
"kwargs will be passed to the metaclass."
msgstr ""
"``starargs``\\와 ``kwargs``\\는 함수 호출에서와같이 각각 단일 노드입니다. starargs는 베이스 클래스 "
"리스트에 연결하도록 확장되고, kwargs는 메타 클래스로 전달됩니다."

#: ../Doc/library/ast.rst:1428
msgid ""
"``body`` is a list of nodes representing the code within the class "
"definition."
msgstr "``body``\\는 클래스 정의 내에서 코드를 나타내는 노드 리스트입니다."

#: ../Doc/library/ast.rst:1430
msgid "``decorator_list`` is a list of nodes, as in :class:`FunctionDef`."
msgstr "``decorator_list``\\는 :class:`FunctionDef`\\에서와 같이 노드 리스트입니다."

#: ../Doc/library/ast.rst:1459
msgid "Async and await"
msgstr "Async와 await"

#: ../Doc/library/ast.rst:1463
msgid ""
"An ``async def`` function definition. Has the same fields as "
":class:`FunctionDef`."
msgstr "``async def`` 함수 정의. :class:`FunctionDef`\\와 같은 필드를 갖습니다."

#: ../Doc/library/ast.rst:1469
msgid ""
"An ``await`` expression. ``value`` is what it waits for. Only valid in "
"the body of an :class:`AsyncFunctionDef`."
msgstr ""
"``await`` 표현식. ``value``\\는 기다릴 대상입니다. :class:`AsyncFunctionDef`\\의 본문에서만"
" 유효합니다."

#: ../Doc/library/ast.rst:1502
msgid ""
"``async for`` loops and ``async with`` context managers. They have the "
"same fields as :class:`For` and :class:`With`, respectively. Only valid "
"in the body of an :class:`AsyncFunctionDef`."
msgstr ""
"``async for`` 루프와 ``async with`` 컨텍스트 관리자. 이들은 각각 :class:`For`\\와 "
":class:`With`\\와 같은 필드를 갖습니다. :class:`AsyncFunctionDef`\\의 본문에서만 유효합니다."

#: ../Doc/library/ast.rst:1507
msgid ""
"When a string is parsed by :func:`ast.parse`, operator nodes (subclasses "
"of :class:`ast.operator`, :class:`ast.unaryop`, :class:`ast.cmpop`, "
":class:`ast.boolop` and :class:`ast.expr_context`) on the returned tree "
"will be singletons. Changes to one will be reflected in all other "
"occurrences of the same value (e.g. :class:`ast.Add`)."
msgstr ""
"문자열이 :func:`ast.parse`\\로 구문 분석될 때, 반환된 트리의 연산자 노드(:class:`ast.operator`,"
" :class:`ast.unaryop`, :class:`ast.cmpop`, :class:`ast.boolop` 및 "
":class:`ast.expr_context`\\의 서브 클래스)는 싱글톤이 됩니다. 어느 하나의 변경 사항은 같은 값으로 등장하는"
" 다른 모든 곳에 반영됩니다 (예를 들어 :class:`ast.Add`)."

#: ../Doc/library/ast.rst:1515
msgid ":mod:`ast` Helpers"
msgstr ":mod:`ast` 도우미"

#: ../Doc/library/ast.rst:1517
msgid ""
"Apart from the node classes, the :mod:`ast` module defines these utility "
"functions and classes for traversing abstract syntax trees:"
msgstr "노드 클래스 외에도, :mod:`ast` 모듈은 추상 구문 트리를 탐색하기 위해 다음 유틸리티 함수와 클래스를 정의합니다:"

#: ../Doc/library/ast.rst:1522
msgid ""
"Parse the source into an AST node.  Equivalent to ``compile(source, "
"filename, mode, ast.PyCF_ONLY_AST)``."
msgstr ""
"소스를 AST 노드로 구문 분석합니다. ``compile(source, filename, mode, "
"ast.PyCF_ONLY_AST)``\\와 동등합니다."

#: ../Doc/library/ast.rst:1525
msgid ""
"If ``type_comments=True`` is given, the parser is modified to check and "
"return type comments as specified by :pep:`484` and :pep:`526`. This is "
"equivalent to adding :data:`ast.PyCF_TYPE_COMMENTS` to the flags passed "
"to :func:`compile()`.  This will report syntax errors for misplaced type "
"comments.  Without this flag, type comments will be ignored, and the "
"``type_comment`` field on selected AST nodes will always be ``None``.  In"
" addition, the locations of ``# type: ignore`` comments will be returned "
"as the ``type_ignores`` attribute of :class:`Module` (otherwise it is "
"always an empty list)."
msgstr ""
"``type_comments=True``\\가 제공되면, 구문 분석기는 :pep:`484`\\와 :pep:`526`\\에 지정된 형"
" 주석을 확인하고 반환하도록 수정됩니다. 이는 :func:`compile()`\\에 전달된 플래그에 "
":data:`ast.PyCF_TYPE_COMMENTS`\\를 추가하는 것과 같습니다. 이것은 잘못 배치된 형 주석에 대한 문법 "
"에러를 보고합니다. 이 플래그가 없으면, 형 주석은 무시되고, 선택한 AST 노드의 ``type_comment`` 필드는 항상 "
"``None``\\입니다. 또한, ``# type: ignore`` 주석의 위치는 :class:`Module`\\의 "
"``type_ignores`` 어트리뷰트로 반환됩니다 (그렇지 않으면 항상 빈 리스트입니다)."

#: ../Doc/library/ast.rst:1535
msgid ""
"In addition, if ``mode`` is ``'func_type'``, the input syntax is modified"
" to correspond to :pep:`484` \"signature type comments\", e.g. ``(str, "
"int) -> List[str]``."
msgstr ""
"또한, ``mode``\\가 ``'func_type'``\\이면, 입력 문법은 :pep:`484` \"서명 형 주석\"에 따라 "
"수정됩니다, 예를 들어 ``(str, int) -> List[str]``."

#: ../Doc/library/ast.rst:1539
msgid ""
"Also, setting ``feature_version`` to a tuple ``(major, minor)`` will "
"attempt to parse using that Python version's grammar. Currently ``major``"
" must equal to ``3``.  For example, setting ``feature_version=(3, 4)`` "
"will allow the use of ``async`` and ``await`` as variable names.  The "
"lowest supported version is ``(3, 4)``; the highest is "
"``sys.version_info[0:2]``."
msgstr ""
"또한, ``feature_version``\\을 튜플 ``(major, minor)``\\로 설정하면 해당 파이썬 버전의 문법을 "
"사용하여 구문 분석을 시도합니다. 현재 ``major``\\는 ``3``\\과 같아야 합니다. 예를 들어, "
"``feature_version=(3, 4)``\\를 설정하면 변수 이름으로 ``async``\\와 ``await``\\를 사용할 "
"수 있습니다. 가장 낮은 지원 버전은 ``(3, 4)``\\입니다; 가장 높은 것은 "
"``sys.version_info[0:2]``\\입니다."

#: ../Doc/library/ast.rst:1547 ../Doc/library/ast.rst:1586
msgid ""
"It is possible to crash the Python interpreter with a sufficiently "
"large/complex string due to stack depth limitations in Python's AST "
"compiler."
msgstr "파이썬 AST 컴파일러의 스택 깊이 제한으로 인해 충분히 크고/복잡한 문자열로 파이썬 인터프리터가 충돌하도록 만들 수 있습니다."

#: ../Doc/library/ast.rst:1551
msgid "Added ``type_comments``, ``mode='func_type'`` and ``feature_version``."
msgstr "``type_comments``, ``mode='func_type'`` 및 ``feature_version``\\ 추가했습니다."

#: ../Doc/library/ast.rst:1557
msgid ""
"Unparse an :class:`ast.AST` object and generate a string with code that "
"would produce an equivalent :class:`ast.AST` object if parsed back with "
":func:`ast.parse`."
msgstr ""
":class:`ast.AST` 객체를 역 구문 분석하고 :func:`ast.parse`\\로 다시 구문 분석할 경우 동등한 "
":class:`ast.AST` 객체를 생성하는 코드가 포함된 문자열을 생성합니다."

#: ../Doc/library/ast.rst:1562
msgid ""
"The produced code string will not necessarily be equal to the original "
"code that generated the :class:`ast.AST` object (without any compiler "
"optimizations, such as constant tuples/frozensets)."
msgstr ""
"생성된 코드 문자열은 :class:`ast.AST` 객체를 생성한 원래 코드와 반드시 같을 필요는 없습니다 (상수 "
"튜플/frozenset과 같은 컴파일러 최적화 없이)."

#: ../Doc/library/ast.rst:1567
msgid ""
"Trying to unparse a highly complex expression would result with "
":exc:`RecursionError`."
msgstr "매우 복잡한 표현식을 역 구분 분석하려고 하면 :exc:`RecursionError`\\가 발생할 수 있습니다."

#: ../Doc/library/ast.rst:1575
msgid ""
"Safely evaluate an expression node or a string containing a Python "
"literal or container display.  The string or node provided may only "
"consist of the following Python literal structures: strings, bytes, "
"numbers, tuples, lists, dicts, sets, booleans, and ``None``."
msgstr ""
"파이썬 리터럴 이나 컨테이너 디스플레이를 포함하는 표현식 노드나 문자열을 안전하게 평가합니다. 제공된 문자열이나 노드는 다음과 같은"
" 파이썬 리터럴 구조로만 구성될 수 있습니다: 문자열, 바이트열, 숫자, 튜플, 리스트, 딕셔너리, 집합, 불리언 및 "
"``None``."

#: ../Doc/library/ast.rst:1580
msgid ""
"This can be used for safely evaluating strings containing Python values "
"from untrusted sources without the need to parse the values oneself.  It "
"is not capable of evaluating arbitrarily complex expressions, for example"
" involving operators or indexing."
msgstr ""
"값을 직접 구문 분석할 필요 없이 신뢰할 수 없는 소스의 파이썬 값을 포함하는 문자열을 안전하게 평가하는 데 사용할 수 있습니다. "
"예를 들어 연산자나 인덱싱이 개입한, 임의의 복잡한 표현식을 평가할 수 없습니다."

#: ../Doc/library/ast.rst:1590
msgid "Now allows bytes and set literals."
msgstr "이제 바이트열과 집합 리터럴을 허용합니다."

#: ../Doc/library/ast.rst:1593
msgid "Now supports creating empty sets with ``'set()'``."
msgstr "이제 ``'set()'``\\으로 빈 집합을 만드는 것을 지원합니다."

#: ../Doc/library/ast.rst:1599
msgid ""
"Return the docstring of the given *node* (which must be a "
":class:`FunctionDef`, :class:`AsyncFunctionDef`, :class:`ClassDef`, or "
":class:`Module` node), or ``None`` if it has no docstring. If *clean* is "
"true, clean up the docstring's indentation with :func:`inspect.cleandoc`."
msgstr ""
"주어진 *node*\\(:class:`FunctionDef`, :class:`AsyncFunctionDef`, "
":class:`ClassDef` 또는 :class:`Module` 노드이어야 합니다)의 독스트링이나, 독스트링이 없으면 "
"``None``\\을 반환합니다. *clean*\\이 참이면, :func:`inspect.cleandoc`\\으로 독스트링의 "
"들여쓰기를 정리합니다."

#: ../Doc/library/ast.rst:1605
msgid ":class:`AsyncFunctionDef` is now supported."
msgstr ":class:`AsyncFunctionDef` 가 이제 지원됩니다."

#: ../Doc/library/ast.rst:1611
msgid ""
"Get source code segment of the *source* that generated *node*. If some "
"location information (:attr:`lineno`, :attr:`end_lineno`, "
":attr:`col_offset`, or :attr:`end_col_offset`) is missing, return "
"``None``."
msgstr ""
"*node*\\를 생성한 *source*\\의 소스 코드 세그먼트를 가져옵니다. 일부 위치 정보(:attr:`lineno`, "
":attr:`end_lineno`, :attr:`col_offset` 또는 :attr:`end_col_offset`)가 없으면, "
"``None``\\을 반환합니다."

#: ../Doc/library/ast.rst:1615
msgid ""
"If *padded* is ``True``, the first line of a multi-line statement will be"
" padded with spaces to match its original position."
msgstr "*padded*\\가 ``True``\\이면, 여러 줄 문장의 첫 번째 줄은 원래 위치와 일치하도록 스페이스로 채워집니다."

#: ../Doc/library/ast.rst:1623
msgid ""
"When you compile a node tree with :func:`compile`, the compiler expects "
":attr:`lineno` and :attr:`col_offset` attributes for every node that "
"supports them.  This is rather tedious to fill in for generated nodes, so"
" this helper adds these attributes recursively where not already set, by "
"setting them to the values of the parent node.  It works recursively "
"starting at *node*."
msgstr ""
":func:`compile`\\로 노드 트리를 컴파일할 때, 컴파일러는 지원하는 모든 노드에 대해 :attr:`lineno`\\와 "
":attr:`col_offset` 어트리뷰트를 기대합니다. 생성된 노드를 채울 때는 이것이 다소 지루하므로, 이 도우미는 이러한 "
"어트리뷰트를 재귀적으로 아직 설정되지 않은 위치에 부모 노드의 값으로 설정하여 추가합니다. *node*\\부터 재귀적으로 "
"작동합니다."

#: ../Doc/library/ast.rst:1632
msgid ""
"Increment the line number and end line number of each node in the tree "
"starting at *node* by *n*. This is useful to \"move code\" to a different"
" location in a file."
msgstr ""
"*node*\\에서 시작하는 트리에서 각 노드의 줄 번호와 끝 줄 번호를 *n*\\만큼 증가시킵니다. 파일의 다른 위치로 \"코드를"
" 이동\"하는 데 유용합니다."

#: ../Doc/library/ast.rst:1639
msgid ""
"Copy source location (:attr:`lineno`, :attr:`col_offset`, "
":attr:`end_lineno`, and :attr:`end_col_offset`) from *old_node* to "
"*new_node* if possible, and return *new_node*."
msgstr ""
"가능하면 소스 위치(:attr:`lineno`, :attr:`col_offset`, :attr:`end_lineno` 및 "
":attr:`end_col_offset`)를 *old_node*\\에서 *new_node*\\로 복사하고, *new_node*\\를"
" 반환합니다."

#: ../Doc/library/ast.rst:1646
msgid ""
"Yield a tuple of ``(fieldname, value)`` for each field in "
"``node._fields`` that is present on *node*."
msgstr ""
"*node*\\에 존재하는 ``node._fields``\\의 각 필드에 대해 ``(fieldname, value)`` 튜플을 "
"산출합니다."

#: ../Doc/library/ast.rst:1652
msgid ""
"Yield all direct child nodes of *node*, that is, all fields that are "
"nodes and all items of fields that are lists of nodes."
msgstr "*node*\\의 모든 직접 자식 노드, 즉 노드인 모든 필드와 노드 리스트인 필드의 모든 항목을 산출합니다."

#: ../Doc/library/ast.rst:1658
msgid ""
"Recursively yield all descendant nodes in the tree starting at *node* "
"(including *node* itself), in no specified order.  This is useful if you "
"only want to modify nodes in place and don't care about the context."
msgstr ""
"*node*\\로 시작하는 트리(*node* 자체를 포함합니다)의 모든 자손 노드를 지정된 순서 없이 재귀적으로 산출합니다. 이는 "
"노드를 제자리에서 수정하고 문맥을 신경 쓰지 않을 때 유용합니다."

#: ../Doc/library/ast.rst:1665
msgid ""
"A node visitor base class that walks the abstract syntax tree and calls a"
" visitor function for every node found.  This function may return a value"
" which is forwarded by the :meth:`visit` method."
msgstr ""
"추상 구문 트리를 걷고 발견된 모든 노드에 대해 방문자 함수를 호출하는 노드 방문자 베이스 클래스. 이 함수는 "
":meth:`visit` 메서드에 의해 전달되는 값을 반환할 수 있습니다."

#: ../Doc/library/ast.rst:1669
msgid ""
"This class is meant to be subclassed, with the subclass adding visitor "
"methods."
msgstr "이 클래스는 서브 클래싱하고자 하는 것이며, 서브 클래스는 방문자 메서드를 추가합니다."

#: ../Doc/library/ast.rst:1674
msgid ""
"Visit a node.  The default implementation calls the method called "
":samp:`self.visit_{classname}` where *classname* is the name of the node "
"class, or :meth:`generic_visit` if that method doesn't exist."
msgstr ""
"노드를 방문합니다. 기본 구현은 :samp:`self.visit_{classname}`\\이라는 메서드를 호출하는데, 여기서 "
"*classname* 은 노드 클래스의 이름입니다. 또는 이 메서드가 없으면 :meth:`generic_visit`\\를 "
"호출합니다."

#: ../Doc/library/ast.rst:1680
msgid "This visitor calls :meth:`visit` on all children of the node."
msgstr "이 방문자는 노드의 자식에 대해 :meth:`visit`\\를 호출합니다."

#: ../Doc/library/ast.rst:1682
msgid ""
"Note that child nodes of nodes that have a custom visitor method won't be"
" visited unless the visitor calls :meth:`generic_visit` or visits them "
"itself."
msgstr ""
"방문자가 :meth:`generic_visit`\\를 호출하거나 직접 방문하지 않는 한, 사용자 정의 방문자 메서드가 있는 노드의 "
"자식 노드는 방문 되지 않음에 유의하십시오."

#: ../Doc/library/ast.rst:1686
msgid ""
"Don't use the :class:`NodeVisitor` if you want to apply changes to nodes "
"during traversal.  For this a special visitor exists "
"(:class:`NodeTransformer`) that allows modifications."
msgstr ""
"탐색 중에 노드에 변경 사항을 적용하려면 :class:`NodeVisitor`\\를 사용하지 마십시오. 이를 위해 수정을 허락하는 "
"특수한 방문자(:class:`NodeTransformer`)가 있습니다."

#: ../Doc/library/ast.rst:1692
msgid ""
"Methods :meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, "
":meth:`visit_NameConstant` and :meth:`visit_Ellipsis` are deprecated now "
"and will not be called in future Python versions.  Add the "
":meth:`visit_Constant` method to handle all constant nodes."
msgstr ""
"메서드 :meth:`visit_Num`, :meth:`visit_Str`, :meth:`visit_Bytes`, "
":meth:`visit_NameConstant` 및 :meth:`visit_Ellipsis`\\는 이제 폐지되었고 향후 파이썬 "
"버전에서는 호출되지 않을 것입니다. 모든 상수 노드를 처리하려면 :meth:`visit_Constant` 메서드를 추가하십시오."

#: ../Doc/library/ast.rst:1700
msgid ""
"A :class:`NodeVisitor` subclass that walks the abstract syntax tree and "
"allows modification of nodes."
msgstr "추상 구문 트리를 걷고 노드 수정을 허락하는 :class:`NodeVisitor` 서브 클래스."

#: ../Doc/library/ast.rst:1703
msgid ""
"The :class:`NodeTransformer` will walk the AST and use the return value "
"of the visitor methods to replace or remove the old node.  If the return "
"value of the visitor method is ``None``, the node will be removed from "
"its location, otherwise it is replaced with the return value.  The return"
" value may be the original node in which case no replacement takes place."
msgstr ""
":class:`NodeTransformer`\\는 AST를 걷고 방문자 메서드의 반환 값을 사용하여 이전 노드를 바꾸거나 "
"제거합니다. 방문자 메서드의 반환 값이 ``None``\\이면, 노드가 그 위치에서 제거되고, 그렇지 않으면 반환 값으로 "
"치환됩니다. 반환 값은 원래 노드일 수 있으며, 이때는 치환이 일어나지 않습니다."

#: ../Doc/library/ast.rst:1709
msgid ""
"Here is an example transformer that rewrites all occurrences of name "
"lookups (``foo``) to ``data['foo']``::"
msgstr "다음은 모든 이름 조회(``foo``)를 ``data['foo']``\\로 다시 쓰는 변환기 예제입니다::"

#: ../Doc/library/ast.rst:1721
msgid ""
"Keep in mind that if the node you're operating on has child nodes you "
"must either transform the child nodes yourself or call the "
":meth:`generic_visit` method for the node first."
msgstr ""
"작업 중인 노드에 자식 노드가 있으면 자식 노드를 직접 변환하거나 노드에 대한 :meth:`generic_visit` 메서드를 먼저"
" 호출해야 함을 염두에 두십시오."

#: ../Doc/library/ast.rst:1725
msgid ""
"For nodes that were part of a collection of statements (that applies to "
"all statement nodes), the visitor may also return a list of nodes rather "
"than just a single node."
msgstr ""
"문장의 컬렉션의 일부인 노드의 경우 (모든 문장 노드에 적용됩니다), 방문자는 단일 노드가 아닌 노드 리스트를 반환 할 수도 "
"있습니다."

#: ../Doc/library/ast.rst:1729
msgid ""
"If :class:`NodeTransformer` introduces new nodes (that weren't part of "
"original tree) without giving them location information (such as "
":attr:`lineno`), :func:`fix_missing_locations` should be called with the "
"new sub-tree to recalculate the location information::"
msgstr ""
":class:`NodeTransformer`\\가 위치 정보(가령 :attr:`lineno`)를 제공하지 않고 (원래 트리의 일부가"
" 아닌) 새 노드를 도입하면, 위치 정보를 다시 계산하려면 :func:`fix_missing_locations`\\를 새 서브 "
"트리로 호출해야 합니다::"

#: ../Doc/library/ast.rst:1737
msgid "Usually you use the transformer like this::"
msgstr "일반적으로 다음과 같이 변환기를 사용합니다::"

#: ../Doc/library/ast.rst:1744
msgid ""
"Return a formatted dump of the tree in *node*.  This is mainly useful for"
" debugging purposes.  If *annotate_fields* is true (by default), the "
"returned string will show the names and the values for fields. If "
"*annotate_fields* is false, the result string will be more compact by "
"omitting unambiguous field names.  Attributes such as line numbers and "
"column offsets are not dumped by default.  If this is wanted, "
"*include_attributes* can be set to true."
msgstr ""
"*node*\\에서 포맷된 트리 덤프를 반환합니다. 이것은 주로 디버깅 목적으로 유용합니다. *annotate_fields*\\가 "
"참이면 (기본값), 반환된 문자열에 필드의 이름과 값이 표시됩니다. *annotate_fields*\\가 거짓이면, 모호하지 않은 "
"필드 이름을 생략하여 결과 문자열이 더 간결해집니다. 줄 번호와 열 오프셋과 같은 어트리뷰트는 기본적으로 덤프 되지 않습니다. "
"원한다면, *include_attributes*\\를 참으로 설정할 수 있습니다."

#: ../Doc/library/ast.rst:1752
msgid ""
"If *indent* is a non-negative integer or string, then the tree will be "
"pretty-printed with that indent level.  An indent level of 0, negative, "
"or ``\"\"`` will only insert newlines.  ``None`` (the default) selects "
"the single line representation. Using a positive integer indent indents "
"that many spaces per level.  If *indent* is a string (such as "
"``\"\\t\"``), that string is used to indent each level."
msgstr ""
"*indent*\\가 음이 아닌 정수나 문자열이면, 트리는 그 들여쓰기 수준으로 예쁘게 인쇄됩니다. 들여쓰기 수준 0, 음수 또는 "
"``\"\"``\\는 줄 넘김 만 삽입합니다. ``None``\\(기본값)은 단일 줄 표현을 선택합니다. 양의 정수 indent를 "
"사용하면 수준마다 그만큼 들여쓰기 됩니다. *indent*\\가 문자열(가령 ``\"\\t\"``)이면, 해당 문자열은 각 수준을 "
"들여 쓰는 데 사용됩니다."

#: ../Doc/library/ast.rst:1759
msgid "Added the *indent* option."
msgstr "*indent* 옵션을 추가했습니다."

#: ../Doc/library/ast.rst:1766
msgid "Compiler Flags"
msgstr "컴파일러 플래그"

#: ../Doc/library/ast.rst:1768
msgid ""
"The following flags may be passed to :func:`compile` in order to change "
"effects on the compilation of a program:"
msgstr "프로그램 컴파일에 대한 효과를 변경하기 위해 다음 플래그를 :func:`compile`\\에 전달할 수 있습니다:"

#: ../Doc/library/ast.rst:1773
msgid ""
"Enables support for top-level ``await``, ``async for``, ``async with`` "
"and async comprehensions."
msgstr ""
"최상위 수준 ``await``, ``async for``, ``async with`` 및 비동기 컴프리헨션에 대한 지원을 "
"활성화합니다."

#: ../Doc/library/ast.rst:1780
msgid ""
"Generates and returns an abstract syntax tree instead of returning a "
"compiled code object."
msgstr "컴파일된 코드 객체를 반환하는 대신 추상 구문 트리를 생성하고 반환합니다."

#: ../Doc/library/ast.rst:1785
msgid ""
"Enables support for :pep:`484` and :pep:`526` style type comments (``# "
"type: <type>``, ``# type: ignore <stuff>``)."
msgstr ""
":pep:`484`\\와 :pep:`526` 스타일 형 주석(``# type: <type>``, ``# type: ignore "
"<stuff>``)에 대한 지원을 활성화합니다."

#: ../Doc/library/ast.rst:1794
msgid "Command-Line Usage"
msgstr "명령 줄 사용법"

#: ../Doc/library/ast.rst:1798
msgid ""
"The :mod:`ast` module can be executed as a script from the command line. "
"It is as simple as:"
msgstr ":mod:`ast` 모듈은 명령 줄에서 스크립트로 실행될 수 있습니다. 다음과 같이 간단합니다:"

#: ../Doc/library/ast.rst:1805
msgid "The following options are accepted:"
msgstr "다음과 같은 옵션이 허용됩니다:"

#: ../Doc/library/ast.rst:1811
msgid "Show the help message and exit."
msgstr "도움말 메시지를 표시하고 종료합니다."

#: ../Doc/library/ast.rst:1816
msgid ""
"Specify what kind of code must be compiled, like the *mode* argument in "
":func:`parse`."
msgstr ":func:`parse`\\의 *mode* 인자와 같이, 컴파일해야 하는 코드 종류를 지정합니다."

#: ../Doc/library/ast.rst:1821
msgid "Don't parse type comments."
msgstr "형 주석을 구문 분석하지 않습니다."

#: ../Doc/library/ast.rst:1825
msgid "Include attributes such as line numbers and column offsets."
msgstr "줄 번호와 열 오프셋과 같은 어트리뷰트를 포함합니다."

#: ../Doc/library/ast.rst:1830
msgid "Indentation of nodes in AST (number of spaces)."
msgstr "AST에서 노드 들여쓰기(스페이스 수)."

#: ../Doc/library/ast.rst:1832
msgid ""
"If :file:`infile` is specified its contents are parsed to AST and dumped "
"to stdout.  Otherwise, the content is read from stdin."
msgstr ""
":file:`infile`\\이 지정되면 그 내용이 AST로 구문 분석되고 stdout에 덤프 됩니다. 그렇지 않으면, "
"stdin에서 내용을 읽습니다."

#: ../Doc/library/ast.rst:1838
msgid ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, an "
"external documentation resource, has good details on working with Python "
"ASTs."
msgstr ""
"`Green Tree Snakes <https://greentreesnakes.readthedocs.io/>`_, 파이썬 AST로 "
"작업하는 것에 대한 자세한 내용이 있는 외부 문서 자원."

#: ../Doc/library/ast.rst:1841
msgid ""
"`ASTTokens <https://asttokens.readthedocs.io/en/latest/user-guide.html>`_"
" annotates Python ASTs with the positions of tokens and text in the "
"source code that generated them. This is helpful for tools that make "
"source code transformations."
msgstr ""
"`ASTTokens <https://asttokens.readthedocs.io/en/latest/user-"
"guide.html>`_\\는 토큰의 위치와 토큰을 생성한 소스 코드의 텍스트로 파이썬 AST에 주석을 추가합니다. 이는 소스 코드"
" 변환을 수행하는 도구에 유용합니다."

#: ../Doc/library/ast.rst:1846
msgid ""
"`leoAst.py <http://leoeditor.com/appendices.html#leoast-py>`_ unifies the"
" token-based and parse-tree-based views of python programs by inserting "
"two-way links between tokens and ast nodes."
msgstr ""
"`leoAst.py <http://leoeditor.com/appendices.html#leoast-py>`_\\는 토큰과 ast "
"노드 사이에 양방향 링크를 삽입하여 파이썬 프로그램의 토큰 기반과 구문 분석 트리 기반 뷰를 통합합니다."

#: ../Doc/library/ast.rst:1850
msgid ""
"`LibCST <https://libcst.readthedocs.io/>`_ parses code as a Concrete "
"Syntax Tree that looks like an ast tree and keeps all formatting details."
" It's useful for building automated refactoring (codemod) applications "
"and linters."
msgstr ""
"`LibCST <https://libcst.readthedocs.io/>`_\\는 코드를 ast 트리처럼 보이고 모든 포매팅 세부 "
"정보를 유지하는 구상 구문 트리(Concrete Syntax Tree)로 구문 분석합니다. 자동화된 리팩토링 (codemod) 응용"
" 프로그램과 린터(linter)를 구축하는 데 유용합니다."

#: ../Doc/library/ast.rst:1855
msgid ""
"`Parso <https://parso.readthedocs.io>`_ is a Python parser that supports "
"error recovery and round-trip parsing for different Python versions (in "
"multiple Python versions). Parso is also able to list multiple syntax "
"errors in your python file."
msgstr ""
"`Parso <https://parso.readthedocs.io>`_\\는 다른 파이썬 버전(여러 Python 버전에서)에 대한 "
"에러 복구와 왕복 구문 분석(round-trip parsing)을 지원하는 파이썬 파서입니다. Parso는 여러분의 파이썬 파일에 "
"있는 여러 구문 에러를 나열 할 수도 있습니다."

