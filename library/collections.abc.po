# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-24 20:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:2
msgid ":mod:`collections.abc` --- Abstract Base Classes for Containers"
msgstr ":mod:`collections.abc` --- 컨테이너의 추상 베이스 클래스"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:10
msgid "Formerly, this module was part of the :mod:`collections` module."
msgstr "이전에는, 이 모듈이 :mod:`collections` 모듈의 일부였습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:13
msgid "**Source code:** :source:`Lib/_collections_abc.py`"
msgstr "**소스 코드:** :source:`Lib/_collections_abc.py`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:23
msgid ""
"This module provides :term:`abstract base classes <abstract base class>` "
"that can be used to test whether a class provides a particular interface;"
" for example, whether it is hashable or whether it is a mapping."
msgstr ""
"이 모듈은 클래스가 특정 인터페이스를 제공하는지를 검사하는 데 사용할 수 있는 :term:`추상 베이스 클래스 <abstract "
"base class>`\\를 제공합니다; 예를 들어, 해시 가능한지 또는 매핑인지입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:31
msgid "Collections Abstract Base Classes"
msgstr "Collections 추상 베이스 클래스"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:33
msgid ""
"The collections module offers the following :term:`ABCs <abstract base "
"class>`:"
msgstr "collections 모듈은 다음과 같은 :term:`ABC <abstract base class>`\\를 제공합니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:38
msgid "ABC"
msgstr "ABC"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:38
msgid "Inherits from"
msgstr "상속"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:38
msgid "Abstract Methods"
msgstr "추상 메서드"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:38
msgid "Mixin Methods"
msgstr "믹스인 메서드"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:40
msgid ":class:`Container`"
msgstr ":class:`Container`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:40
msgid "``__contains__``"
msgstr "``__contains__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:41
msgid ":class:`Hashable`"
msgstr ":class:`Hashable`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:41
msgid "``__hash__``"
msgstr "``__hash__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:42
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:43
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:44
msgid ":class:`Iterable`"
msgstr ":class:`Iterable`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:42
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:43
msgid "``__iter__``"
msgstr "``__iter__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:43
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:45
msgid ":class:`Iterator`"
msgstr ":class:`Iterator`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:43
msgid "``__next__``"
msgstr "``__next__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:44
msgid ":class:`Reversible`"
msgstr ":class:`Reversible`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:44
msgid "``__reversed__``"
msgstr "``__reversed__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:45
msgid ":class:`Generator`"
msgstr ":class:`Generator`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:45
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:93
msgid "``send``, ``throw``"
msgstr "``send``, ``throw``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:45
msgid "``close``, ``__iter__``, ``__next__``"
msgstr "``close``, ``__iter__``, ``__next__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:46
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:85
msgid ":class:`Sized`"
msgstr ":class:`Sized`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:46
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:85
msgid "``__len__``"
msgstr "``__len__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:47
msgid ":class:`Callable`"
msgstr ":class:`Callable`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:47
msgid "``__call__``"
msgstr "``__call__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:48
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:64
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:74
msgid ":class:`Collection`"
msgstr ":class:`Collection`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:48
msgid ":class:`Sized`, :class:`Iterable`, :class:`Container`"
msgstr ":class:`Sized`, :class:`Iterable`, :class:`Container`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:48
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:64
msgid "``__contains__``, ``__iter__``, ``__len__``"
msgstr "``__contains__``, ``__iter__``, ``__len__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:52
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:55
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:61
msgid ":class:`Sequence`"
msgstr ":class:`Sequence`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:52
msgid ":class:`Reversible`, :class:`Collection`"
msgstr ":class:`Reversible`, :class:`Collection`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:52
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:61
msgid "``__getitem__``, ``__len__``"
msgstr "``__getitem__``, ``__len__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:52
msgid "``__contains__``, ``__iter__``, ``__reversed__``, ``index``, and ``count``"
msgstr "``__contains__``, ``__iter__``, ``__reversed__``, ``index`` 및 ``count``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:55
msgid ":class:`MutableSequence`"
msgstr ":class:`MutableSequence`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:55
msgid "``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"
msgstr "``__getitem__``, ``__setitem__``, ``__delitem__``, ``__len__``, ``insert``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:55
msgid ""
"Inherited :class:`Sequence` methods and ``append``, ``reverse``, "
"``extend``, ``pop``, ``remove``, and ``__iadd__``"
msgstr ""
"상속된 :class:`Sequence` 메서드와 ``append``, ``reverse``, ``extend``, ``pop``, "
"``remove`` 및 ``__iadd__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:61
msgid ":class:`ByteString`"
msgstr ":class:`ByteString`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:61
msgid "Inherited :class:`Sequence` methods"
msgstr "상속된 :class:`Sequence` 메서드"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:64
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:68
msgid ":class:`Set`"
msgstr ":class:`Set`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:64
msgid ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__``, and ``isdisjoint``"
msgstr ""
"``__le__``, ``__lt__``, ``__eq__``, ``__ne__``, ``__gt__``, ``__ge__``, "
"``__and__``, ``__or__``, ``__sub__``, ``__xor__`` 및 ``isdisjoint``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:68
msgid ":class:`MutableSet`"
msgstr ":class:`MutableSet`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:68
msgid "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"
msgstr "``__contains__``, ``__iter__``, ``__len__``, ``add``, ``discard``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:68
msgid ""
"Inherited :class:`Set` methods and ``clear``, ``pop``, ``remove``, "
"``__ior__``, ``__iand__``, ``__ixor__``, and ``__isub__``"
msgstr ""
"상속된 :class:`Set` 메서드와 ``clear``, ``pop``, ``remove``, ``__ior__``, "
"``__iand__``, ``__ixor__`` 및 ``__isub__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:74
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:78
msgid ":class:`Mapping`"
msgstr ":class:`Mapping`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:74
msgid "``__getitem__``, ``__iter__``, ``__len__``"
msgstr "``__getitem__``, ``__iter__``, ``__len__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:74
msgid ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__``, "
"and ``__ne__``"
msgstr ""
"``__contains__``, ``keys``, ``items``, ``values``, ``get``, ``__eq__`` 및 "
"``__ne__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:78
msgid ":class:`MutableMapping`"
msgstr ":class:`MutableMapping`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:78
msgid ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, "
"``__len__``"
msgstr ""
"``__getitem__``, ``__setitem__``, ``__delitem__``, ``__iter__``, "
"``__len__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:78
msgid ""
"Inherited :class:`Mapping` methods and ``pop``, ``popitem``, ``clear``, "
"``update``, and ``setdefault``"
msgstr ""
"상속된 :class:`Mapping` 메서드와 ``pop``, ``popitem``, ``clear``, ``update`` 및 "
"``setdefault``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:85
msgid ":class:`MappingView`"
msgstr ":class:`MappingView`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:86
msgid ":class:`ItemsView`"
msgstr ":class:`ItemsView`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:86
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:88
msgid ":class:`MappingView`, :class:`Set`"
msgstr ":class:`MappingView`, :class:`Set`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:86
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:88
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:90
msgid "``__contains__``, ``__iter__``"
msgstr "``__contains__``, ``__iter__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:88
msgid ":class:`KeysView`"
msgstr ":class:`KeysView`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:90
msgid ":class:`ValuesView`"
msgstr ":class:`ValuesView`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:90
msgid ":class:`MappingView`, :class:`Collection`"
msgstr ":class:`MappingView`, :class:`Collection`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:92
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:93
msgid ":class:`Awaitable`"
msgstr ":class:`Awaitable`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:92
msgid "``__await__``"
msgstr "``__await__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:93
msgid ":class:`Coroutine`"
msgstr ":class:`Coroutine`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:93
msgid "``close``"
msgstr "``close``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:94
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:95
msgid ":class:`AsyncIterable`"
msgstr ":class:`AsyncIterable`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:94
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:95
msgid "``__aiter__``"
msgstr "``__aiter__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:95
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:96
msgid ":class:`AsyncIterator`"
msgstr ":class:`AsyncIterator`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:95
msgid "``__anext__``"
msgstr "``__anext__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:96
msgid ":class:`AsyncGenerator`"
msgstr ":class:`AsyncGenerator`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:96
msgid "``asend``, ``athrow``"
msgstr "``asend``, ``athrow``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:96
msgid "``aclose``, ``__aiter__``, ``__anext__``"
msgstr "``aclose``, ``__aiter__``, ``__anext__``"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:102
#, fuzzy
msgid "ABC for classes that provide the :meth:`__contains__` method."
msgstr ":meth:`__iter__` 메서드를 제공하는 클래스의 ABC."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:106
#, fuzzy
msgid "ABC for classes that provide the :meth:`__hash__` method."
msgstr ":meth:`__iter__` 메서드를 제공하는 클래스의 ABC."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:110
#, fuzzy
msgid "ABC for classes that provide the :meth:`__len__` method."
msgstr ":meth:`__iter__` 메서드를 제공하는 클래스의 ABC."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:114
#, fuzzy
msgid "ABC for classes that provide the :meth:`__call__` method."
msgstr ":meth:`__iter__` 메서드를 제공하는 클래스의 ABC."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:118
msgid "ABC for classes that provide the :meth:`__iter__` method."
msgstr ":meth:`__iter__` 메서드를 제공하는 클래스의 ABC."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:120
msgid ""
"Checking ``isinstance(obj, Iterable)`` detects classes that are "
"registered as :class:`Iterable` or that have an :meth:`__iter__` method, "
"but it does not detect classes that iterate with the :meth:`__getitem__` "
"method. The only reliable way to determine whether an object is "
":term:`iterable` is to call ``iter(obj)``."
msgstr ""
"``isinstance(obj, Iterable)``\\를 검사하면 :class:`Iterable`\\로 등록되었거나 "
":meth:`__iter__` 메서드가 있는 클래스를 감지하지만, :meth:`__getitem__` 메서드로 이터레이트 하는 "
"클래스는 감지하지 않습니다. 객체가 :term:`이터러블 <iterable>`\\인지를 확인하는 유일하게 신뢰성 있는 방법은 "
"``iter(obj)``\\를 호출하는 것입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:128
msgid "ABC for sized iterable container classes."
msgstr "길이가 있는 이터러블 컨테이너 클래스의 ABC."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:134
msgid ""
"ABC for classes that provide the :meth:`~iterator.__iter__` and "
":meth:`~iterator.__next__` methods.  See also the definition of "
":term:`iterator`."
msgstr ""
":meth:`~iterator.__iter__` 와 :meth:`~iterator.__next__` 메서드를 제공하는 클래스의 "
"ABC. :term:`이터레이터 <iterator>`\\의 정의도 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:140
msgid ""
"ABC for iterable classes that also provide the :meth:`__reversed__` "
"method."
msgstr ":meth:`__reversed__` 메서드도 제공하는 이터러블 클래스의 ABC."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:147
msgid ""
"ABC for generator classes that implement the protocol defined in "
":pep:`342` that extends iterators with the :meth:`~generator.send`, "
":meth:`~generator.throw` and :meth:`~generator.close` methods. See also "
"the definition of :term:`generator`."
msgstr ""
":meth:`~generator.send`, :meth:`~generator.throw` 및 "
":meth:`~generator.close` 메서드로 이터레이터를 확장하는 :pep:`342`\\에 정의된 프로토콜을 구현하는 "
"제너레이터 클래스의 ABC. :term:`제너레이터 <generator>`\\의 정의도 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:158
msgid "ABCs for read-only and mutable :term:`sequences <sequence>`."
msgstr "읽기 전용과 가변 :term:`시퀀스 <sequence>`\\의 ABC."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:160
msgid ""
"Implementation note: Some of the mixin methods, such as :meth:`__iter__`,"
" :meth:`__reversed__` and :meth:`index`, make repeated calls to the "
"underlying :meth:`__getitem__` method. Consequently, if "
":meth:`__getitem__` is implemented with constant access speed, the mixin "
"methods will have linear performance; however, if the underlying method "
"is linear (as it would be with a linked list), the mixins will have "
"quadratic performance and will likely need to be overridden."
msgstr ""
"구현 참고 사항: :meth:`__iter__`, :meth:`__reversed__` 및 :meth:`index`\\와 같은 일부"
" 믹스인(mixin) 메서드는 하부 :meth:`__getitem__` 메서드를 반복적으로 호출합니다. 따라서, "
":meth:`__getitem__`\\이 상수 액세스 속도로 구현되면 믹스인 메서드는 선형 성능을 갖습니다; 그러나 하부 메서드가 "
"선형이면 (링크드 리스트에서처럼), 믹스인은 2차 함수 성능을 가지므로 재정의해야 할 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:169
msgid "The index() method added support for *stop* and *start* arguments."
msgstr "index() 메서드는 *stop*\\과 *start* 인자에 대한 지원을 추가했습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:176
msgid "ABCs for read-only and mutable sets."
msgstr "읽기 전용과 가변 집합의 ABC."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:181
msgid "ABCs for read-only and mutable :term:`mappings <mapping>`."
msgstr "읽기 전용과 가변 :term:`매핑 <mapping>`\\의 ABC."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:188
msgid "ABCs for mapping, items, keys, and values :term:`views <dictionary view>`."
msgstr "매핑, 항목, 키 및 값 :term:`뷰 <dictionary view>`\\의 ABC."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:192
msgid ""
"ABC for :term:`awaitable` objects, which can be used in :keyword:`await` "
"expressions.  Custom implementations must provide the :meth:`__await__` "
"method."
msgstr ""
":keyword:`await` 표현식에서 사용할 수 있는 :term:`어웨이터블 <awaitable>` 객체의 ABC. 사용자 정의"
" 구현은 :meth:`__await__` 메서드를 제공해야 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:196
#, fuzzy
msgid ""
":term:`Coroutine <coroutine>` objects and instances of the "
":class:`~collections.abc.Coroutine` ABC are all instances of this ABC."
msgstr ""
":term:`코루틴 <coroutine>` 객체와 :class:`~collections.abc.Coroutine` ABC의 "
"인스턴스는 모두 이 ABC의 인스턴스입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:200
msgid ""
"In CPython, generator-based coroutines (generators decorated with "
":func:`types.coroutine` or :func:`asyncio.coroutine`) are *awaitables*, "
"even though they do not have an :meth:`__await__` method. Using "
"``isinstance(gencoro, Awaitable)`` for them will return ``False``. Use "
":func:`inspect.isawaitable` to detect them."
msgstr ""
"CPython에서, 제너레이터 기반 코루틴(:func:`types.coroutine`\\이나 "
":func:`asyncio.coroutine`\\으로 데코레이트 된 제너레이터)은, :meth:`__await__` 메서드가 없어도"
" *어웨이터블* 입니다. 이들에 대해 ``isinstance(gencoro, Awaitable)``\\를 사용하면 "
"``False``\\가 반환됩니다. 이들을 감지하려면 :func:`inspect.isawaitable`\\을 사용하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:210
msgid ""
"ABC for coroutine compatible classes.  These implement the following "
"methods, defined in :ref:`coroutine-objects`: :meth:`~coroutine.send`, "
":meth:`~coroutine.throw`, and :meth:`~coroutine.close`.  Custom "
"implementations must also implement :meth:`__await__`.  All "
":class:`Coroutine` instances are also instances of :class:`Awaitable`.  "
"See also the definition of :term:`coroutine`."
msgstr ""
"코루틴 호환 클래스의 ABC. :ref:`coroutine-objects`\\에 정의된 다음 메서드를 구현합니다: "
":meth:`~coroutine.send`, :meth:`~coroutine.throw` 및 "
":meth:`~coroutine.close`. 사용자 정의 구현은 :meth:`__await__`\\도 구현해야 합니다. 모든 "
":class:`Coroutine` 인스턴스는 :class:`Awaitable`\\의 인스턴스이기도 합니다. :term:`코루틴 "
"<coroutine>`\\의 정의도 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:218
msgid ""
"In CPython, generator-based coroutines (generators decorated with "
":func:`types.coroutine` or :func:`asyncio.coroutine`) are *awaitables*, "
"even though they do not have an :meth:`__await__` method. Using "
"``isinstance(gencoro, Coroutine)`` for them will return ``False``. Use "
":func:`inspect.isawaitable` to detect them."
msgstr ""
"CPython에서, 제너레이터 기반 코루틴(:func:`types.coroutine`\\이나 "
":func:`asyncio.coroutine`\\으로 데코레이트 된 제너레이터)은, :meth:`__await__` 메서드가 없어도"
" *어웨이터블* 입니다. 이들에 대해 ``isinstance(gencoro, Coroutine)``\\을 사용하면 "
"``False``\\가 반환됩니다. 이들을 감지하려면 :func:`inspect.isawaitable`\\을 사용하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:228
msgid ""
"ABC for classes that provide ``__aiter__`` method.  See also the "
"definition of :term:`asynchronous iterable`."
msgstr ""
"``__aiter__`` 메서드를 제공하는 클래스의 ABC. :term:`비동기 이터러블 <asynchronous "
"iterable>`\\의 정의도 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:235
msgid ""
"ABC for classes that provide ``__aiter__`` and ``__anext__`` methods.  "
"See also the definition of :term:`asynchronous iterator`."
msgstr ""
"``__aiter__`` 와 ``__anext__`` 메서드를 제공하는 클래스의 ABC. :term:`비동기 이터레이터 "
"<asynchronous iterator>`\\의 정의도 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:242
msgid ""
"ABC for asynchronous generator classes that implement the protocol "
"defined in :pep:`525` and :pep:`492`."
msgstr ":pep:`525`\\와 :pep:`492`\\에 정의된 프로토콜을 구현하는 비동기 제너레이터 클래스의 ABC."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:248
msgid ""
"These ABCs allow us to ask classes or instances if they provide "
"particular functionality, for example::"
msgstr "이러한 ABC들은 클래스나 인스턴스가 특정 기능을 제공하는지 묻는 것을 허용합니다, 예를 들어::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:255
msgid ""
"Several of the ABCs are also useful as mixins that make it easier to "
"develop classes supporting container APIs.  For example, to write a class"
" supporting the full :class:`Set` API, it is only necessary to supply the"
" three underlying abstract methods: :meth:`__contains__`, "
":meth:`__iter__`, and :meth:`__len__`. The ABC supplies the remaining "
"methods such as :meth:`__and__` and :meth:`isdisjoint`::"
msgstr ""
"ABC 중 일부는 믹스인으로도 유용하여 컨테이너 API를 지원하는 클래스를 쉽게 개발할 수 있게 합니다. 예를 들어, 전체 "
":class:`Set` API를 지원하는 클래스를 작성하려면, :meth:`__contains__`, :meth:`__iter__`"
" 및 :meth:`__len__`\\의 세 가지 하부 추상 메서드 만 제공하면 됩니다. ABC는 :meth:`__and__`\\와 "
":meth:`isdisjoint`\\와 같은 나머지 메서드를 제공합니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:284
msgid "Notes on using :class:`Set` and :class:`MutableSet` as a mixin:"
msgstr ":class:`Set`\\과 :class:`MutableSet`\\을 믹스인으로 사용할 때의 주의 사항:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:287
msgid ""
"Since some set operations create new sets, the default mixin methods need"
" a way to create new instances from an iterable. The class constructor is"
" assumed to have a signature in the form ``ClassName(iterable)``. That "
"assumption is factored-out to an internal classmethod called "
":meth:`_from_iterable` which calls ``cls(iterable)`` to produce a new "
"set. If the :class:`Set` mixin is being used in a class with a different "
"constructor signature, you will need to override :meth:`_from_iterable` "
"with a classmethod that can construct new instances from an iterable "
"argument."
msgstr ""
"일부 집합 연산은 새로운 집합을 만들기 때문에, 기본 믹스인 메서드는 이터러블로부터 새 인스턴스를 만드는 방법이 필요합니다. 클래스"
" 생성자가 ``ClassName(iterable)`` 형식의 서명을 가진 것으로 가정합니다. 이 가정은 새로운 집합을 생성하기 위해"
" ``cls(iterable)``\\를 호출하는 :meth:`_from_iterable`\\이라는 내부 클래스 메서드로 "
"분리되었습니다. :class:`Set` 믹스인이 다른 생성자 서명을 갖는 클래스에서 사용되고 있으면, 이터러블 인자로부터 새 "
"인스턴스를 생성할 수 있는 클래스 메서드로 :meth:`_from_iterable`\\을 재정의해야 합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:298
msgid ""
"To override the comparisons (presumably for speed, as the semantics are "
"fixed), redefine :meth:`__le__` and :meth:`__ge__`, then the other "
"operations will automatically follow suit."
msgstr ""
"비교를 재정의하려면 (의미는 고정되었으므로, 아마도 속도 때문에), :meth:`__le__`\\와 :meth:`__ge__`\\를"
" 재정의하십시오, 그러면 다른 연산은 자동으로 맞춰집니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:303
msgid ""
"The :class:`Set` mixin provides a :meth:`_hash` method to compute a hash "
"value for the set; however, :meth:`__hash__` is not defined because not "
"all sets are hashable or immutable.  To add set hashability using mixins,"
" inherit from both :meth:`Set` and :meth:`Hashable`, then define "
"``__hash__ = Set._hash``."
msgstr ""
":class:`Set` 믹스인은 집합의 해시값을 계산하는 :meth:`_hash` 메서드를 제공합니다; 그러나 모든 집합이 해시 "
"가능하거나 불변이지는 않기 때문에 :meth:`__hash__`\\는 정의되지 않습니다. 믹스인을 사용하여 집합 해시 가능성을 "
"추가하려면, :meth:`Set`\\와 :meth:`Hashable`\\을 모두 상속한 다음, ``__hash__ = "
"Set._hash``\\를 정의하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:311
msgid ""
"`OrderedSet recipe <https://code.activestate.com/recipes/576694/>`_ for "
"an example built on :class:`MutableSet`."
msgstr ""
":class:`MutableSet`\\으로 구축한 예제 `OrderedSet 조리법 "
"<https://code.activestate.com/recipes/576694/>`_."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/collections.abc.rst:314
msgid "For more about ABCs, see the :mod:`abc` module and :pep:`3119`."
msgstr "ABC에 대한 자세한 내용은, :mod:`abc` 모듈과 :pep:`3119`\\를 참조하십시오."

#~ msgid ""
#~ "ABCs for classes that provide "
#~ "respectively the methods :meth:`__contains__`, "
#~ ":meth:`__hash__`, :meth:`__len__`, and "
#~ ":meth:`__call__`."
#~ msgstr ""
#~ "각각 메서드 :meth:`__contains__`, :meth:`__hash__`, "
#~ ":meth:`__len__` 및 :meth:`__call__`\\을 제공하는 "
#~ "클래스의 ABC."

