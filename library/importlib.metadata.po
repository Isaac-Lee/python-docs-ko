# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-08 03:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:5
msgid "Using :mod:`!importlib.metadata`"
msgstr ":mod:`!importlib.metadata` 사용하기"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:8
msgid ""
"This functionality is provisional and may deviate from the usual version "
"semantics of the standard library."
msgstr "이 기능은 잠정적이며 표준 라이브러리의 일반적인 버전 의미와 다를 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:11
msgid ""
"``importlib.metadata`` is a library that provides for access to installed"
" package metadata.  Built in part on Python's import system, this library"
" intends to replace similar functionality in the `entry point API`_ and "
"`metadata API`_ of ``pkg_resources``.  Along with "
":mod:`importlib.resources` in Python 3.7 and newer (backported as "
"`importlib_resources`_ for older versions of Python), this can eliminate "
"the need to use the older and less efficient ``pkg_resources`` package."
msgstr ""
"``importlib.metadata``\\는 설치된 패키지 메타 데이터에 대한 액세스를 제공하는 라이브러리입니다. 파이썬의 임포트"
" 시스템에 내장된 이 라이브러리는 ``pkg_resources``\\의 `진입 지점 API <entry point "
"API_>`_\\와 `메타데이터 API <metadata API_>`_\\에서 유사한 기능을 대체하려고 합니다. 파이썬 3.7 "
"이상의 :mod:`importlib.resources`\\(이전 버전의 파이썬을 위해 `importlib_resources`_\\로"
" 역 이식되었습니다)와 함께, 오래되고 덜 효율적인 ``pkg_resources`` 패키지를 사용할 필요를 제거합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:20
msgid ""
"By \"installed package\" we generally mean a third-party package "
"installed into Python's ``site-packages`` directory via tools such as "
"`pip <https://pypi.org/project/pip/>`_.  Specifically, it means a package"
" with either a discoverable ``dist-info`` or ``egg-info`` directory, and "
"metadata defined by :pep:`566` or its older specifications. By default, "
"package metadata can live on the file system or in zip archives on "
":data:`sys.path`.  Through an extension mechanism, the metadata can live "
"almost anywhere."
msgstr ""
"\"설치된 패키지\"는 일반적으로 `pip <https://pypi.org/project/pip/>`_ 와 같은 도구를 통해 "
"파이썬의 ``site-packages`` 디렉터리에 설치된 제삼자 패키지를 의미합니다. 특히, 발견 가능한 ``dist-"
"info``\\나 ``egg-info`` 디렉터리와 :pep:`566` 또는 이전 명세로 정의된 메타 데이터가 있는 패키지를 "
"의미합니다. 기본적으로, 패키지 메타 데이터는 파일 시스템이나 :data:`sys.path`\\의 zip 저장소에서 살 수 "
"있습니다. 확장 메커니즘을 통해, 메타 데이터는 거의 모든 곳에서 살아갈 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:31
msgid "Overview"
msgstr "개요"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:33
msgid ""
"Let's say you wanted to get the version string for a package you've "
"installed using ``pip``.  We start by creating a virtual environment and "
"installing something into it:"
msgstr ""
"``pip``\\를 사용하여 설치한 패키지의 버전 문자열을 얻고 싶다고 가정해 봅시다. 우선 가상 환경을 만들고 그 안에 뭔가 "
"설치합니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:43
msgid "You can get the version string for ``wheel`` by running the following:"
msgstr "다음을 실행하여 ``wheel``\\에 대한 버전 문자열을 얻을 수 있습니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:52
msgid ""
"You can also get the set of entry points keyed by group, such as "
"``console_scripts``, ``distutils.commands`` and others.  Each group "
"contains a sequence of :ref:`EntryPoint <entry-points>` objects."
msgstr ""
"``console_scripts``, ``distutils.commands``\\와 다른 것들과 같은 그룹 키로 진입 지점 집합을 "
"얻을 수도 있습니다. 각 그룹은 :ref:`EntryPoint <entry-points>` 객체의 시퀀스를 포함합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:56
msgid "You can get the :ref:`metadata for a distribution <metadata>`::"
msgstr "여러분은 :ref:`배포 메타데이터 <metadata>`\\를 얻을 수 있습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:61
msgid ""
"You can also get a :ref:`distribution's version number <version>`, list "
"its :ref:`constituent files <files>`, and get a list of the "
"distribution's :ref:`requirements`."
msgstr ""
"또한 :ref:`배포의 버전 번호 <version>`\\를 가져오고, :ref:`구성 파일 <files>`\\을 나열하고, 배포의 "
":ref:`요구사항 <requirements>` 리스트를 얻을 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:67
msgid "Functional API"
msgstr "기능적 API"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:69
msgid "This package provides the following functionality via its public API."
msgstr "이 패키지는 공용 API를 통해 다음과 같은 기능을 제공합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:75
msgid "Entry points"
msgstr "진입 지점"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:77
msgid ""
"The ``entry_points()`` function returns a dictionary of all entry points,"
" keyed by group.  Entry points are represented by ``EntryPoint`` "
"instances; each ``EntryPoint`` has a ``.name``, ``.group``, and "
"``.value`` attributes and a ``.load()`` method to resolve the value.  "
"There are also ``.module``, ``.attr``, and ``.extras`` attributes for "
"getting the components of the ``.value`` attribute::"
msgstr ""
"``entry_points()`` 함수는 그룹 키를 갖는 모든 진입 지점의 딕셔너리를 반환합니다. 진입 지점은 "
"``EntryPoint`` 인스턴스로 나타냅니다; 각 ``EntryPoint``\\에는 ``.name``, ``.group`` 및 "
"``.value`` 어트리뷰트가 있고 값을 결정하는 ``.load()`` 메서드가 있습니다. ``.value`` 어트리뷰트의 구성 "
"요소를 가져오기 위한 ``.module``, ``.attr`` 및 ``.extras`` 어트리뷰트도 있습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:101
msgid ""
"The ``group`` and ``name`` are arbitrary values defined by the package "
"author and usually a client will wish to resolve all entry points for a "
"particular group.  Read `the setuptools docs "
"<https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-"
"discovery-of-services-and-plugins>`_ for more information on entry "
"points, their definition, and usage."
msgstr ""
"``group``\\과 ``name``\\은 패키지 저자가 정의한 임의의 값이며 일반적으로 클라이언트는 특정 그룹에 대한 모든 진입"
" 지점을 찾으려고 합니다. 진입 지점의 정의와 사용법에 대한 자세한 정보는 `the setuptools docs "
"<https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-"
"discovery-of-services-and-plugins>`_\\를 읽으십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:111
msgid "Distribution metadata"
msgstr "배포 메타데이터"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:113
msgid ""
"Every distribution includes some metadata, which you can extract using "
"the ``metadata()`` function::"
msgstr "모든 배포는 ``metadata()`` 함수를 사용하여 추출할 수 있는 몇 가지 메타 데이터가 포함되어 있습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:118
msgid ""
"The keys of the returned data structure [#f1]_ name the metadata "
"keywords, and their values are returned unparsed from the distribution "
"metadata::"
msgstr ""
"반환된 데이터 구조의 [#f1]_ 키는 메타데이터 키워드의 이름을 지정하고, 해당 값은 배포 메타데이터에서 구문 분석하지 않은 채로"
" 반환됩니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:128
msgid "Distribution versions"
msgstr "배포 버전"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:130
msgid ""
"The ``version()`` function is the quickest way to get a distribution's "
"version number, as a string::"
msgstr "``version()`` 함수는 배포의 버전 번호를 문자열로 가져오는 가장 빠른 방법입니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:140
msgid "Distribution files"
msgstr "배포 파일"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:142
msgid ""
"You can also get the full set of files contained within a distribution.  "
"The ``files()`` function takes a distribution package name and returns "
"all of the files installed by this distribution.  Each file object "
"returned is a ``PackagePath``, a :class:`pathlib.Path` derived object "
"with additional ``dist``, ``size``, and ``hash`` properties as indicated "
"by the metadata.  For example::"
msgstr ""
"배포에 포함된 전체 파일 집합을 가져올 수도 있습니다. ``files()`` 함수는 배포 패키지 이름을 받아들이고 이 배포가 설치 "
"한 모든 파일을 반환합니다. 반환된 각 파일 객체는 ``PackagePath``\\인데, 메타 데이터가 알려주는 ``dist``, "
"``size`` 및 ``hash`` 프로퍼티가 추가된 :class:`pathlib.Path` 파생 객체입니다. 예를 들면::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:158
msgid "Once you have the file, you can also read its contents::"
msgstr "일단 파일을 얻으면, 내용을 읽을 수도 있습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:169
msgid ""
"In the case where the metadata file listing files (RECORD or SOURCES.txt)"
" is missing, ``files()`` will return ``None``. The caller may wish to "
"wrap calls to ``files()`` in `always_iterable <https://more-"
"itertools.readthedocs.io/en/stable/api.html#more_itertools.always_iterable>`_"
" or otherwise guard against this condition if the target distribution is "
"not known to have the metadata present."
msgstr ""
"메타 데이터 파일 목록 파일(RECORD나 SOURCES.txt)이 누락된 경우, ``files()``\\는 ``None``\\을 "
"반환합니다. 대상 배포에 메타 데이터가 있음이 알려지지 않았을 때, 이 조건에 대한 보호로 호출자는 ``files()``\\에 대한"
" 호출을 `always_iterable <https://more-"
"itertools.readthedocs.io/en/stable/api.html#more_itertools.always_iterable>`_\\이나"
" 다른 것으로 감쌀 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:180
msgid "Distribution requirements"
msgstr "배포 요구 사항"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:182
msgid ""
"To get the full set of requirements for a distribution, use the "
"``requires()`` function::"
msgstr "배포의 전체 요구 사항을 얻으려면, ``requires()`` 함수를 사용하십시오::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:190
msgid "Distributions"
msgstr "배포"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:192
msgid ""
"While the above API is the most common and convenient usage, you can get "
"all of that information from the ``Distribution`` class.  A "
"``Distribution`` is an abstract object that represents the metadata for a"
" Python package.  You can get the ``Distribution`` instance::"
msgstr ""
"위의 API가 가장 일반적이며 편리한 사용법이지만, ``Distribution`` 클래스에서 모든 정보를 얻을 수 있습니다. "
"``Distribution``\\은 파이썬 패키지의 메타 데이터를 나타내는 추상 객체입니다. ``Distribution`` "
"인스턴스를 얻을 수 있습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:200
msgid ""
"Thus, an alternative way to get the version number is through the "
"``Distribution`` instance::"
msgstr "따라서, 버전 번호를 얻는 다른 방법은 ``Distribution`` 인스턴스를 사용하는 것입니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:206
msgid ""
"There are all kinds of additional metadata available on the "
"``Distribution`` instance::"
msgstr "``Distribution`` 인스턴스에서 사용할 수 있는 모든 종류의 추가 메타 데이터가 있습니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:214
msgid ""
"The full set of available metadata is not described here.  See :pep:`566`"
" for additional details."
msgstr "사용 가능한 메타 데이터의 전체 집합은 여기에서 설명하지 않습니다. 자세한 내용은 :pep:`566`\\을 참조하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:219
msgid "Extending the search algorithm"
msgstr "검색 알고리즘 확장하기"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:221
msgid ""
"Because package metadata is not available through :data:`sys.path` "
"searches, or package loaders directly, the metadata for a package is "
"found through import system :ref:`finders <finders-and-loaders>`.  To "
"find a distribution package's metadata, ``importlib.metadata`` queries "
"the list of :term:`meta path finders <meta path finder>` on "
":data:`sys.meta_path`."
msgstr ""
"패키지 메타 데이터는 :data:`sys.path` 검색이나 패키지 로더를 통해 직접 사용할 수 없으므로, 패키지의 메타 데이터는 "
"임포트 시스템 :ref:`파인더 <finders-and-loaders>`\\를 통해 찾습니다. 배포 패키지의 메타 데이터를 찾기 "
"위해, ``importlib.metadata``\\는 :data:`sys.meta_path`\\의 :term:`메타 경로 파인더 "
"<meta path finder>`\\의 리스트를 조회합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:227
msgid ""
"The default ``PathFinder`` for Python includes a hook that calls into "
"``importlib.metadata.MetadataPathFinder`` for finding distributions "
"loaded from typical file-system-based paths."
msgstr ""
"파이썬의 기본 ``PathFinder``\\에는 일반적인 파일 시스템 기반 경로에서 로드된 배포를 찾기 위해 "
"``importlib.metadata.MetadataPathFinder``\\를 호출하는 훅이 포함되어 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:231
msgid ""
"The abstract class :py:class:`importlib.abc.MetaPathFinder` defines the "
"interface expected of finders by Python's import system. "
"``importlib.metadata`` extends this protocol by looking for an optional "
"``find_distributions`` callable on the finders from :data:`sys.meta_path`"
" and presents this extended interface as the ``DistributionFinder`` "
"abstract base class, which defines this abstract method::"
msgstr ""
"추상 클래스 :py:class:`importlib.abc.MetaPathFinder`\\는 파이썬의 임포트 시스템에 의해 파인더가 "
"기대하는 인터페이스를 정의합니다. ``importlib.metadata``\\는 :data:`sys.meta_path`\\의 "
"파인더에서 선택적인 ``find_distributions`` 콜러블을 조회함으로써 이 프로토콜을 확장하고 이 확장된 인터페이스를 "
"다음과 같은 추상 메서드를 정의하는 ``DistributionFinder`` 추상 베이스 클래스로 제공합니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:245
msgid ""
"The ``DistributionFinder.Context`` object provides ``.path`` and "
"``.name`` properties indicating the path to search and name to match and "
"may supply other relevant context."
msgstr ""
"``DistributionFinder.Context`` 객체는 검색할 경로와 일치할 이름을 가리키는 ``.path``\\와 "
"``.name`` 프로퍼티를 제공하고 다른 관련 문맥을 제공할 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:249
msgid ""
"What this means in practice is that to support finding distribution "
"package metadata in locations other than the file system, subclass "
"``Distribution`` and implement the abstract methods. Then from a custom "
"finder, return instances of this derived ``Distribution`` in the "
"``find_distributions()`` method."
msgstr ""
"이것이 실제로 의미하는 것은, 파일 시스템이 아닌 위치에서 배포 패키지 메타 데이터를 찾는 것을 지원하려면, "
"``Distribution``\\을 서브 클래싱하고 추상 메서드를 구현해야 한다는 것입니다. 그런 다음 사용자 정의 파인더의 "
"``find_distributions()`` 메서드에서, 이 파생된 ``Distribution``\\의 인스턴스를 반환하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:262
msgid "Footnotes"
msgstr "각주"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/importlib.metadata.rst:263
msgid ""
"Technically, the returned distribution metadata object is an "
":class:`email.message.EmailMessage` instance, but this is an "
"implementation detail, and not part of the stable API.  You should only "
"use dictionary-like methods and syntax to access the metadata contents."
msgstr ""
"기술적으로, 반환된 배포 메타 데이터 객체는 :class:`email.message.EmailMessage` 인스턴스이지만, 이것은"
" 구현 세부 사항이며 안정 API의 일부는 아닙니다. 메타 데이터 내용에 액세스하려면, 딕셔너리와 같은 메서드와 문법을 사용해야 "
"합니다."

