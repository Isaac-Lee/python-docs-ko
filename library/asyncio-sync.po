# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-08 03:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dong-gweon Oh <flowdas@gmail.com>\n"
"Language-Team: Korean (https://python.flowdas.com)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:7
msgid "Synchronization Primitives"
msgstr "동기화 프리미티브"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:9
msgid "**Source code:** :source:`Lib/asyncio/locks.py`"
msgstr "**소스 코드:** :source:`Lib/asyncio/locks.py`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:13
msgid ""
"asyncio synchronization primitives are designed to be similar to those of"
" the :mod:`threading` module with two important caveats:"
msgstr ""
"asyncio 동기화 프리미티브는 :mod:`threading` 모듈의 것과 유사하도록 설계되었습니다만 두 가지 중요한 주의 사항이"
" 있습니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:16
msgid ""
"asyncio primitives are not thread-safe, therefore they should not be used"
" for OS thread synchronization (use :mod:`threading` for that);"
msgstr ""
"asyncio 프리미티브는 스레드 안전하지 않으므로, OS 스레드 동기화(이를 위해서는 :mod:`threading`\\을 "
"사용하십시오)에 사용하면 안 됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:20
msgid ""
"methods of these synchronization primitives do not accept the *timeout* "
"argument; use the :func:`asyncio.wait_for` function to perform operations"
" with timeouts."
msgstr ""
"이러한 동기화 프리미티브의 메서드는 *timeout* 인자를 받아들이지 않습니다; :func:`asyncio.wait_for` "
"함수를 사용하여 시간제한이 있는 연산을 수행하십시오."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:24
msgid "asyncio has the following basic synchronization primitives:"
msgstr "asyncio에는 다음과 같은 기본 동기화 프리미티브가 있습니다:"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:26
msgid ":class:`Lock`"
msgstr ":class:`Lock`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:27
msgid ":class:`Event`"
msgstr ":class:`Event`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:28
msgid ":class:`Condition`"
msgstr ":class:`Condition`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:29
msgid ":class:`Semaphore`"
msgstr ":class:`Semaphore`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:30
msgid ":class:`BoundedSemaphore`"
msgstr ":class:`BoundedSemaphore`"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:37
msgid "Lock"
msgstr "Lock"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:41
msgid "Implements a mutex lock for asyncio tasks.  Not thread-safe."
msgstr "asyncio 태스크를 위한 뮤텍스 록을 구현합니다. 스레드 안전하지 않습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:43
msgid ""
"An asyncio lock can be used to guarantee exclusive access to a shared "
"resource."
msgstr "asyncio 록은 공유 자원에 대한 독점 액세스를 보장하는 데 사용될 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:46
msgid "The preferred way to use a Lock is an :keyword:`async with` statement::"
msgstr "Lock을 사용하는 가장 좋은 방법은 :keyword:`async with` 문입니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:55
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:200
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:300
msgid "which is equivalent to::"
msgstr "이는 다음과 동등합니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:68
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:114
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:190
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:290
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:345
msgid "The *loop* parameter."
msgstr "*loop* 매개 변수"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:71
msgid "Acquire the lock."
msgstr "록을 얻습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:73
msgid ""
"This method waits until the lock is *unlocked*, sets it to *locked* and "
"returns ``True``."
msgstr ""
"이 메서드는 록이 *풀림(unlocked)*\\이 될 때까지 기다리고, *잠김(locked)*\\으로 설정한 다음 "
"``True``\\를 반환합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:76
msgid ""
"When more than one coroutine is blocked in :meth:`acquire` waiting for "
"the lock to be unlocked, only one coroutine eventually proceeds."
msgstr "잠금이 해제되기를 기다리는 :meth:`acquire`\\에서 둘 이상의 코루틴 블록 될 때, 결국 한 개의 코루틴만 진행됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:80
msgid ""
"Acquiring a lock is *fair*: the coroutine that proceeds will be the first"
" coroutine that started waiting on the lock."
msgstr "록을 얻는 것은 *공평(fair)*\\합니다: 진행할 코루틴은 록을 기다리기 시작한 첫 번째 코루틴이 됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:85
msgid "Release the lock."
msgstr "록을 반납합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:87
msgid "When the lock is *locked*, reset it to *unlocked* and return."
msgstr "록이 *잠김(locked)*\\이면 *풀림(unlocked)*\\으로 재설정하고 돌아옵니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:89
msgid "If the lock is *unlocked*, a :exc:`RuntimeError` is raised."
msgstr "록이 *풀림(unlocked)*\\이면 :exc:`RuntimeError`\\가 발생합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:93
msgid "Return ``True`` if the lock is *locked*."
msgstr "록이 *잠김(locked)*\\이면 ``True``\\를 반환합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:97
msgid "Event"
msgstr "Event"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:101
msgid "An event object.  Not thread-safe."
msgstr "이벤트 객체. 스레드 안전하지 않습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:103
msgid ""
"An asyncio event can be used to notify multiple asyncio tasks that some "
"event has happened."
msgstr "asyncio 이벤트는 어떤 이벤트가 발생했음을 여러 asyncio 태스크에 알리는 데 사용할 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:106
msgid ""
"An Event object manages an internal flag that can be set to *true* with "
"the :meth:`set` method and reset to *false* with the :meth:`clear` "
"method.  The :meth:`wait` method blocks until the flag is set to *true*."
"  The flag is set to *false* initially."
msgstr ""
"Event 객체는 :meth:`set` 메서드로 *참*\\으로 설정하고 :meth:`clear` 메서드로 *거짓*\\으로 재설정할 "
"수 있는 내부 플래그를 관리합니다. :meth:`wait` 메서드는 플래그가 *참*\\으로 설정될 때까지 블록합니다. 플래그는 "
"초기에 *거짓*\\으로 설정됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:117
msgid "Example::"
msgstr "예::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:142
msgid "Wait until the event is set."
msgstr "이벤트가 설정될 때까지 기다립니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:144
msgid ""
"If the event is set, return ``True`` immediately. Otherwise block until "
"another task calls :meth:`set`."
msgstr ""
"이벤트가 설정되었으면 ``True``\\를 즉시 반환합니다. 그렇지 않으면 다른 태스크가 :meth:`set`\\을 호출할 때까지 "
"블록합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:149
msgid "Set the event."
msgstr "이벤트를 설정합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:151
msgid "All tasks waiting for event to be set will be immediately awakened."
msgstr "이벤트가 설정되기를 기다리는 모든 태스크는 즉시 깨어납니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:156
msgid "Clear (unset) the event."
msgstr "이벤트를 지웁니다 (재설정)."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:158
msgid ""
"Tasks awaiting on :meth:`wait` will now block until the :meth:`set` "
"method is called again."
msgstr "이제 :meth:`wait`\\를 기다리는 태스크는 :meth:`set` 메서드가 다시 호출될 때까지 블록 됩니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:163
msgid "Return ``True`` if the event is set."
msgstr "이벤트가 설정되면 ``True``\\를 반환합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:167
msgid "Condition"
msgstr "Condition"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:171
msgid "A Condition object.  Not thread-safe."
msgstr "Condition 객체. 스레드 안전하지 않습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:173
msgid ""
"An asyncio condition primitive can be used by a task to wait for some "
"event to happen and then get exclusive access to a shared resource."
msgstr ""
"asyncio 조건 프리미티브는 태스크가 어떤 이벤트가 발생하기를 기다린 다음 공유 자원에 독점적으로 액세스하는데 사용할 수 "
"있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:177
msgid ""
"In essence, a Condition object combines the functionality of an "
":class:`Event` and a :class:`Lock`.  It is possible to have multiple "
"Condition objects share one Lock, which allows coordinating exclusive "
"access to a shared resource between different tasks interested in "
"particular states of that shared resource."
msgstr ""
"본질에서, Condition 객체는 :class:`Event`\\와 :class:`Lock`\\의 기능을 결합합니다. 여러 개의 "
"Condition 객체가 하나의 Lock을 공유할 수 있으므로, 공유 자원의 특정 상태에 관심이 있는 다른 태스크 간에 공유 자원에"
" 대한 독점적 액세스를 조정할 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:183
msgid ""
"The optional *lock* argument must be a :class:`Lock` object or ``None``."
"  In the latter case a new Lock object is created automatically."
msgstr ""
"선택적 *lock* 인자는 :class:`Lock` 객체나 ``None`` 이어야 합니다. 후자의 경우 새로운 Lock 객체가 "
"자동으로 만들어집니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:191
msgid ""
"The preferred way to use a Condition is an :keyword:`async with` "
"statement::"
msgstr "Condition을 사용하는 가장 좋은 방법은 :keyword:`async with` 문입니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:213
msgid "Acquire the underlying lock."
msgstr "하부 록을 얻습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:215
msgid ""
"This method waits until the underlying lock is *unlocked*, sets it to "
"*locked* and returns ``True``."
msgstr ""
"이 메서드는 하부 록이 *풀림(unlocked)*\\이 될 때까지 대기하고, *잠김(locked)*\\으로 설정한 다음 "
"``True``\\를 반환합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:220
msgid ""
"Wake up at most *n* tasks (1 by default) waiting on this condition.  The "
"method is no-op if no tasks are waiting."
msgstr "이 조건을 기다리는 최대 *n* 태스크(기본적으로 1개)를 깨웁니다. 대기 중인 태스크가 없으면 이 메서드는 no-op입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:223
#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:238
msgid ""
"The lock must be acquired before this method is called and released "
"shortly after.  If called with an *unlocked* lock a :exc:`RuntimeError` "
"error is raised."
msgstr ""
"이 메서드를 호출하기 전에 록을 얻어야 하고, 호출 직후에 반납해야 합니다. *풀린(unlocked)* 록으로 호출하면 "
":exc:`RuntimeError` 에러가 발생합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:229
msgid "Return ``True`` if the underlying lock is acquired."
msgstr "하부 록을 얻었으면 ``True``\\를 돌려줍니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:233
msgid "Wake up all tasks waiting on this condition."
msgstr "이 조건에 대기 중인 모든 태스크를 깨웁니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:235
msgid "This method acts like :meth:`notify`, but wakes up all waiting tasks."
msgstr "이 메서드는 :meth:`notify`\\처럼 작동하지만, 대기 중인 모든 태스크를 깨웁니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:244
msgid "Release the underlying lock."
msgstr "하부 록을 반납합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:246
msgid "When invoked on an unlocked lock, a :exc:`RuntimeError` is raised."
msgstr "풀린 록으로 호출하면, :exc:`RuntimeError`\\가 발생합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:251
msgid "Wait until notified."
msgstr "알릴 때까지 기다립니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:253
msgid ""
"If the calling task has not acquired the lock when this method is called,"
" a :exc:`RuntimeError` is raised."
msgstr "이 메서드가 호출될 때 호출하는 태스크가 록을 얻지 않았으면 :exc:`RuntimeError`\\가 발생합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:256
msgid ""
"This method releases the underlying lock, and then blocks until it is "
"awakened by a :meth:`notify` or :meth:`notify_all` call. Once awakened, "
"the Condition re-acquires its lock and this method returns ``True``."
msgstr ""
"이 메서드는 하부 잠금을 반납한 다음, :meth:`notify` 나 :meth:`notify_all` 호출 때문에 깨어날 때까지 "
"블록합니다. 일단 깨어나면, Condition은 록을 다시 얻고, 이 메서드는 ``True``\\를 돌려줍니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:263
msgid "Wait until a predicate becomes *true*."
msgstr "predicate가 *참*\\이 될 때까지 기다립니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:265
msgid ""
"The predicate must be a callable which result will be interpreted as a "
"boolean value.  The final value is the return value."
msgstr "predicate는 논릿값으로 해석될 결과를 돌려주는 콜러블이어야 합니다. 최종값이 반환 값입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:271
msgid "Semaphore"
msgstr "Semaphore"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:275
msgid "A Semaphore object.  Not thread-safe."
msgstr "Semaphore 객체. 스레드 안전하지 않습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:277
msgid ""
"A semaphore manages an internal counter which is decremented by each "
":meth:`acquire` call and incremented by each :meth:`release` call. The "
"counter can never go below zero; when :meth:`acquire` finds that it is "
"zero, it blocks, waiting until some task calls :meth:`release`."
msgstr ""
"세마포어는 각 :meth:`acquire` 호출로 감소하고, 각 :meth:`release` 호출로 증가하는 내부 카운터를 "
"관리합니다. 카운터는 절대로 0 밑으로 내려갈 수 없습니다; :meth:`acquire`\\가 0을 만나면, "
":meth:`release`\\를 호출할 때까지 기다리면서 블록합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:283
msgid ""
"The optional *value* argument gives the initial value for the internal "
"counter (``1`` by default). If the given value is less than ``0`` a "
":exc:`ValueError` is raised."
msgstr ""
"선택적 *value* 인자는 내부 카운터의 초깃값을 제공합니다 (기본적으로 ``1``). 지정된 값이 ``0``\\보다 작으면 "
":exc:`ValueError`\\가 발생합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:291
msgid ""
"The preferred way to use a Semaphore is an :keyword:`async with` "
"statement::"
msgstr "Semaphore를 사용하는 가장 좋은 방법은 :keyword:`async with` 문입니다::"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:313
msgid "Acquire a semaphore."
msgstr "세마포어를 얻습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:315
msgid ""
"If the internal counter is greater than zero, decrement it by one and "
"return ``True`` immediately.  If it is zero, wait until a :meth:`release`"
" is called and return ``True``."
msgstr ""
"내부 카운터가 0보다 크면, 1 감소시키고 ``True``\\를 즉시 반환합니다. 0이면, :meth:`release`\\가 호출될"
" 때까지 기다린 다음 ``True``\\를 반환합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:321
msgid "Returns ``True`` if semaphore can not be acquired immediately."
msgstr "세마포어를 즉시 얻을 수 없으면 ``True``\\를 반환합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:325
msgid ""
"Release a semaphore, incrementing the internal counter by one. Can wake "
"up a task waiting to acquire the semaphore."
msgstr "세마포어를 반납하고 내부 카운터를 1 증가시킵니다. 세마포어를 얻기 위해 대기하는 태스크를 깨울 수 있습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:328
msgid ""
"Unlike :class:`BoundedSemaphore`, :class:`Semaphore` allows making more "
"``release()`` calls than ``acquire()`` calls."
msgstr ""
":class:`BoundedSemaphore`\\와 달리, :class:`Semaphore`\\는 ``acquire()`` 호출보다"
" 더 많은 ``release()`` 호출을 허용합니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:333
msgid "BoundedSemaphore"
msgstr "BoundedSemaphore"

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:337
msgid "A bounded semaphore object.  Not thread-safe."
msgstr "제한된 세마포어 객체. 스레드 안전하지 않습니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:339
msgid ""
"Bounded Semaphore is a version of :class:`Semaphore` that raises a "
":exc:`ValueError` in :meth:`~Semaphore.release` if it increases the "
"internal counter above the initial *value*."
msgstr ""
"제한된 세마포어는 초기 *value* 위로 내부 카운터를 증가시키면 :meth:`~Semaphore.release`\\에서 "
":exc:`ValueError`\\를 발생시키는 :class:`Semaphore` 버전입니다."

#: /Users/flowdas/works/docs/python-docs-ko/src/Doc/library/asyncio-sync.rst:352
msgid ""
"Acquiring a lock using ``await lock`` or ``yield from lock`` and/or "
":keyword:`with` statement (``with await lock``, ``with (yield from "
"lock)``) was removed.  Use ``async with lock`` instead."
msgstr ""
"``await lock`` 이나 ``yield from lock`` 및/또는 :keyword:`with` 문(``with await"
" lock``, ``with (yield from lock)``)을 사용하여 록을 얻는 것은 제거되었습니다. 대신 ``async "
"with lock``\\을 사용하십시오."

